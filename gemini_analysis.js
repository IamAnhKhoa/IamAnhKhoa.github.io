
/**
 * FILE M·ªöI: gemini_analysis.js
 * =============================
 * Version Final (Major Overhaul):
 * - S·ª≠a l·ªói kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin chi ti·∫øt (Ch·∫©n ƒëo√°n v√†o, ICD, thu·ªëc, DVKT).
 * - N√¢ng c·∫•p giao di·ªán modal to h∆°n, chuy√™n nghi·ªáp h∆°n.
 * - Th√™m b·ªô l·ªçc theo ng√†y ƒë·ªÉ d·ªÖ d√†ng ch·ªçn h·ªì s∆°.
 * - Th√™m khu v·ª±c xem tr∆∞·ªõc chi ti·∫øt h·ªì s∆° tr∆∞·ªõc khi ph√¢n t√≠ch.
 * - Th√™m h∆∞·ªõng d·∫´n l·∫•y API Key.
 * - Th√™m n√∫t b·∫≠t/t·∫Øt ch·∫ø ƒë·ªô to√†n m√†n h√¨nh.
 * - N√¢ng c·∫•p prompt AI ƒë·ªÉ cho ra k·∫øt qu·∫£ ph√¢n t√≠ch ch·∫•t l∆∞·ª£ng h∆°n.
 */

// Global helper function
const escapeBasicHtml = (str) => str ? String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;') : '';

document.addEventListener('DOMContentLoaded', () => {
    console.log("Gemini Analysis feature (Major Overhaul) loaded.");

    // ===================================================================
    // B∆Ø·ªöC 1: TI√äM CSS
    // ===================================================================
    const aiStyles = `
        .tab-button.has-dropdown { position: relative; }
        .ai-dropdown-content { display: none; position: absolute; top: 100%; left: 0; background-color: #f1f1f1; min-width: 100%; box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2); z-index: 1002; border-radius: 0 0 8px 8px; overflow: hidden; animation: fadeIn 0.3s ease-out; }
        .tab-button.has-dropdown:hover .ai-dropdown-content { display: block; }
        .ai-dropdown-content a { color: black; padding: 12px 16px; text-decoration: none; display: block; text-align: left; font-size: 0.95em; }
        .ai-dropdown-content a:hover { background-color: #ddd; }
        body.dark .tab-button.has-dropdown .ai-dropdown-content { background-color: #1f2937; }
        body.dark .ai-dropdown-content a { color: #e5e7eb; }
        body.dark .ai-dropdown-content a:hover { background-color: #374151; }

        .ai-modal { display: none; position: fixed; z-index: 2000; left: 0; top: 0; width: 100%; height: 100%; overflow: auto; background-color: rgba(0,0,0,0.6); backdrop-filter: blur(5px); align-items: center; justify-content: center; }
        .ai-modal.show { display: flex; }
        .ai-modal-content { background-color: #fefefe; margin: auto; padding: 0; border: 1px solid #888; width: 90%; max-width: 1100px; border-radius: 15px; box-shadow: 0 10px 30px rgba(0,0,0,0.2); animation: fadeInScale 0.4s ease-out; display: flex; flex-direction: column; max-height: 90vh; }
        body.dark .ai-modal-content { background: #0f172a; border-color: #374151; }
        .ai-modal-header { padding: 20px; border-bottom: 1px solid #eee; display: flex; justify-content: space-between; align-items: center; }
        body.dark .ai-modal-header { border-bottom-color: #374151; }
        .ai-modal-header h2 { margin: 0; font-size: 1.5em; }
        .ai-modal-body { padding: 25px; display: flex; flex-direction: column; gap: 20px; overflow-y: auto; }
        .ai-modal-footer { padding: 20px; border-top: 1px solid #eee; text-align: right; }
        body.dark .ai-modal-footer { border-top-color: #374151; }
        
        .searchable-select-container { position: relative; }
        .searchable-select-input { width: 100%; cursor: pointer; }
        .searchable-select-options { display: none; position: absolute; top: 100%; left: 0; right: 0; max-height: 200px; overflow-y: auto; border: 1px solid #ccc; border-radius: 8px; background: white; z-index: 2001; }
        .searchable-select-options.show { display: block; }
        .searchable-select-options div { padding: 10px; cursor: pointer; }
        .searchable-select-options div:hover { background-color: #f0f0f0; }
        body.dark .searchable-select-options { background: #1f2937; border-color: #374151; }
        body.dark .searchable-select-options div:hover { background-color: #374151; }

        #aiAnalysisResult { font-size: 14px; line-height: 1.6; }
        #aiAnalysisResult h1 { font-size: 1.8em; color: #2c3e50; border-bottom: 2px solid #3498db; padding-bottom: 10px; margin-bottom: 20px; text-align: center; }
        #aiAnalysisResult h2 { font-size: 1.4em; color: #3498db; margin-top: 25px; border-bottom: 1px solid #bdc3c7; padding-bottom: 5px; }
        #aiAnalysisResult table { width: 100%; border-collapse: collapse; margin-top: 15px; font-size: 0.95em; }
        #aiAnalysisResult th, #aiAnalysisResult td { border: 1px solid #ccc; padding: 8px; text-align: left; }
        #aiAnalysisResult th { background-color: #f2f2f2; font-weight: bold; }
        #aiAnalysisResult pre { background-color: #f0f0f0; padding: 10px; border: 1px solid #ddd; border-radius: 5px; white-space: pre-wrap; word-wrap: break-word; font-size: 0.9em; }
        body.dark #aiAnalysisResult h1 { color: #e5e7eb; border-bottom-color: #4f46e5; }
        body.dark #aiAnalysisResult h2 { color: #818cf8; border-bottom-color: #374151; }
        body.dark #aiAnalysisResult th { background-color: #2c3a4b; border-color: #374151; }
        body.dark #aiAnalysisResult td { border-color: #374151; }
        body.dark #aiAnalysisResult pre { background-color: #111827; border-color: #374151; }

        #aiPreviewContainer { margin-top: 20px; padding: 20px; border: 1px solid #e1e8ed; border-radius: 10px; background-color: #f8f9ff; display: none; }
        body.dark #aiPreviewContainer { background-color: #111827; border-color: #374151; }
        .preview-section h3 { font-size: 1.3em; color: #3498db; margin-bottom: 15px; padding-bottom: 10px; border-bottom: 1px solid #dee2e6; display: flex; align-items: center; gap: 8px; }
        body.dark .preview-section h3 { border-bottom-color: #374151; }
        .preview-info-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 12px 25px; font-size: 1em; }
        .preview-info-grid div { display: flex; }
        .preview-info-grid div > span:first-child { font-weight: 600; color: #6c757d; margin-right: 8px; flex-shrink: 0; }
        body.dark .preview-info-grid div > span:first-child { color: #9ca3af; }
        .preview-table { width: 100%; border-collapse: collapse; margin-top: 10px; }
        .preview-table th, .preview-table td { border: 1px solid #dee2e6; padding: 10px; text-align: left; font-size: 0.95em; }
        .preview-table th { background-color: #e9ecef; }
        body.dark .preview-table th, body.dark .preview-table td { border-color: #374151; }
        body.dark .preview-table th { background-color: #2c3a4b; }
        .api-key-help { display: flex; justify-content: space-between; align-items: center; } .api-key-howto-link { font-size: 0.9em; color: #3498db; cursor: pointer; text-decoration: none; } .api-key-howto-link:hover { text-decoration: underline; } .howto-modal-content { max-width: 700px; } .howto-modal-body ol { padding-left: 25px; } .howto-modal-body li { margin-bottom: 15px; line-height: 1.6; } .howto-modal-body code { background-color: #e9ecef; padding: 2px 6px; border-radius: 4px; font-family: monospace; } body.dark .howto-modal-body code { background-color: #374151; } .howto-modal-body img { max-width: 100%; border-radius: 8px; border: 1px solid #dee2e6; margin-top: 10px; } body.dark .howto-modal-body img { border-color: #374151; }
        .fullscreen-btn { background: none; border: none; cursor: pointer; font-size: 1.5em; color: #6c757d; padding: 5px; line-height: 1; transition: color 0.2s ease, transform 0.2s ease; } .fullscreen-btn:hover { color: #2c3e50; transform: scale(1.1); } body.dark .fullscreen-btn { color: #9ca3af; } body.dark .fullscreen-btn:hover { color: #e5e7eb; }
        .ai-modal-content.fullscreen { width: 100vw; height: 100vh; max-width: 100vw; max-height: 100vh; border-radius: 0; }
        .ai-modal-body .filter-row { display: grid; grid-template-columns: 1fr 2fr; gap: 20px; align-items: end; }
        @media (max-width: 768px) { .ai-modal-body .filter-row { grid-template-columns: 1fr; } }
    `;
    const styleSheet = document.createElement("style");
    styleSheet.innerText = aiStyles;
    document.head.appendChild(styleSheet);

    // ===================================================================
    // B∆Ø·ªöC 2: TI√äM HTML
    // ===================================================================
    const validatorTabButton = document.querySelector("button[onclick*=\"'validatorTab'\"]"); if (validatorTabButton) { validatorTabButton.classList.add('has-dropdown'); validatorTabButton.innerHTML = `<span>üìã Ki·ªÉm tra XML</span><div class="ai-dropdown-content"><a href="#" id="openAiAnalysisModal">Xem chi ti·∫øt h·ªì s∆° ü§ñ</a></div>`; }
    const aiModalHTML = `<div id="aiAnalysisModal" class="ai-modal"><div class="ai-modal-content"><div class="ai-modal-header"><h2>Xem chi ti·∫øt H·ªì s∆°</h2><button id="fullscreenBtn" class="fullscreen-btn" title="To√†n m√†n h√¨nh">‚õ∂</button></div><div class="ai-modal-body"><div class="filter-row"><div class="filter-group"><label for="aiDateFilter">1. Ch·ªçn ng√†y v√†o vi·ªán:</label><input type="date" id="aiDateFilter" class="filter-input"></div><div class="filter-group"><label for="patientSearchInput">2. Ch·ªçn ho·∫∑c t√¨m h·ªì s∆°:</label><div class="searchable-select-container"><input type="text" id="patientSearchInput" class="filter-input searchable-select-input" placeholder="-- Vui l√≤ng ch·ªçn ng√†y tr∆∞·ªõc --" disabled><div id="patientOptions" class="searchable-select-options"></div></div><input type="hidden" id="patientSelectorValue"></div></div><div class="filter-group"><div class="api-key-help"><label for="apiKeyInput">3. Nh·∫≠p Gemini API Key:</label><a href="#" id="showApiKeyHowTo" class="api-key-howto-link">H∆∞·ªõng d·∫´n l·∫•y API Key?</a></div><input type="password" id="apiKeyInput" class="filter-input" placeholder="D√°n API Key v√†o ƒë√¢y"></div><div id="aiPreviewContainer"></div><div class="loading" id="aiLoading"><div class="spinner"></div><p>AI ƒëang ph√¢n t√≠ch h·ªì s∆°...</p></div><div id="aiAnalysisResult"><p>K·∫øt qu·∫£ ph√¢n t√≠ch s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã t·∫°i ƒë√¢y.</p></div></div><div class="ai-modal-footer"><button id="closeAiModalButton" class="btn btn-warning">ƒê√≥ng</button><button id="downloadHtmlButton" class="btn btn-success" style="display: none;">üì• T·∫£i HTML</button><button id="analyzeWithAiButton" class="btn btn-primary" disabled>üöÄ B·∫Øt ƒë·∫ßu ph√¢n t√≠ch</button></div></div></div>`;
    document.body.insertAdjacentHTML('beforeend', aiModalHTML);
    const howtoModalHTML = `<div id="apiKeyHowtoModal" class="ai-modal"><div class="ai-modal-content howto-modal-content"><div class="ai-modal-header"><h2>H∆∞·ªõng D·∫´n L·∫•y Gemini API Key</h2></div><div class="ai-modal-body howto-modal-body"><ol><li>Truy c·∫≠p trang <b><a href="https://aistudio.google.com/apikey" target="_blank">Google AI Studio</a></b> v√† ƒëƒÉng nh·∫≠p b·∫±ng t√†i kho·∫£n Google c·ªßa b·∫°n.</li><li>Nh·∫•n v√†o n√∫t <code>Create API key</code>.<img src="https://i.imgur.com/vH2w3Ab.png" alt="B∆∞·ªõc 2"></li><li>Ch·ªçn <code>Create API key in new project</code>.<img src="https://i.imgur.com/k2YwX2s.png" alt="B∆∞·ªõc 3"></li><li>M·ªôt c·ª≠a s·ªï s·∫Ω hi·ªán ra ch·ª©a API Key c·ªßa b·∫°n. Nh·∫•n v√†o bi·ªÉu t∆∞·ª£ng sao ch√©p.<img src="https://i.imgur.com/YxV5n22.png" alt="B∆∞·ªõc 4"></li><li>Quay l·∫°i ƒë√¢y v√† d√°n Key ƒë√£ sao ch√©p v√†o √¥ nh·∫≠p li·ªáu.</li></ol></div><div class="ai-modal-footer"><button id="closeHowtoModalButton" class="btn btn-primary">ƒê√£ hi·ªÉu</button></div></div></div>`;
    document.body.insertAdjacentHTML('beforeend', howtoModalHTML);

    // ===================================================================
    // B∆Ø·ªöC 3: LOGIC V√Ä S·ª∞ KI·ªÜN
    // ===================================================================
    const openAiModalButton = document.getElementById('openAiAnalysisModal'); const aiModal = document.getElementById('aiAnalysisModal'); const closeAiModalButton = document.getElementById('closeAiModalButton'); const patientSearchInput = document.getElementById('patientSearchInput'); const patientOptionsContainer = document.getElementById('patientOptions'); const patientSelectorValue = document.getElementById('patientSelectorValue'); const analyzeButton = document.getElementById('analyzeWithAiButton'); const apiKeyInput = document.getElementById('apiKeyInput'); const aiResultDiv = document.getElementById('aiAnalysisResult'); const aiLoading = document.getElementById('aiLoading'); const downloadHtmlButton = document.getElementById('downloadHtmlButton'); const aiPreviewContainer = document.getElementById('aiPreviewContainer');
    const aiDateFilter = document.getElementById('aiDateFilter');
    let currentAnalysisResult = { html: '', patient: null };

    openAiModalButton.addEventListener('click', (e) => { e.preventDefault(); e.stopPropagation(); populateDateFilter(); aiModal.classList.add('show'); });
    closeAiModalButton.addEventListener('click', () => aiModal.classList.remove('show'));
    aiModal.addEventListener('click', (e) => { if (e.target === aiModal) { aiModal.classList.remove('show'); } });
    const showHowtoButton = document.getElementById('showApiKeyHowTo'); const howtoModal = document.getElementById('apiKeyHowtoModal'); const closeHowtoButton = document.getElementById('closeHowtoModalButton'); showHowtoButton.addEventListener('click', (e) => { e.preventDefault(); howtoModal.classList.add('show'); }); closeHowtoButton.addEventListener('click', () => howtoModal.classList.remove('show')); howtoModal.addEventListener('click', (e) => { if (e.target === howtoModal) { howtoModal.classList.remove('show'); } });
    const fullscreenBtn = document.getElementById('fullscreenBtn'); const aiModalContent = aiModal.querySelector('.ai-modal-content'); fullscreenBtn.addEventListener('click', () => { if (!document.fullscreenElement) { aiModalContent.requestFullscreen().catch(err => { alert(`L·ªói khi b·∫≠t ch·∫ø ƒë·ªô to√†n m√†n h√¨nh: ${err.message}`); }); } else { document.exitFullscreen(); } });
    document.addEventListener('fullscreenchange', () => { if (!document.fullscreenElement) { aiModalContent.classList.remove('fullscreen'); fullscreenBtn.innerHTML = '‚õ∂'; fullscreenBtn.title = 'To√†n m√†n h√¨nh'; } else { aiModalContent.classList.add('fullscreen'); fullscreenBtn.innerHTML = '‚õ∂'; fullscreenBtn.title = 'Tho√°t to√†n m√†n h√¨nh'; } });

    aiDateFilter.addEventListener('change', populatePatientSelector);
    function populateDateFilter() { if (!globalData || !globalData.allRecords || globalData.allRecords.length === 0) return; const dates = [...new Set(globalData.allRecords.map(r => r.ngayVao.substring(0, 8)))]; dates.sort((a,b) => b.localeCompare(a)); aiDateFilter.innerHTML = '<option value="">-- Ch·ªçn ng√†y --</option>' + dates.map(d => { const dateObj = new Date(d.substring(0,4), d.substring(4,6)-1, d.substring(6,8)); const formatted = dateObj.toISOString().split('T')[0]; return `<option value="${formatted}">${formatDateTimeForDisplay(d)}</option>`; }).join(''); }
    function populatePatientSelector() { const selectedDate = aiDateFilter.value.replace(/-/g, ''); aiPreviewContainer.style.display = 'none'; patientSearchInput.value = ''; patientSelectorValue.value = ''; if (!selectedDate) { patientSearchInput.placeholder = '-- Vui l√≤ng ch·ªçn ng√†y tr∆∞·ªõc --'; patientSearchInput.disabled = true; patientOptionsContainer.innerHTML = ''; validateInputs(); return; } const recordsForDate = globalData.allRecords.filter(record => record.ngayVao.substring(0, 8) === selectedDate); if (recordsForDate.length === 0) { patientSearchInput.placeholder = '-- Kh√¥ng c√≥ h·ªì s∆° cho ng√†y ƒë√£ ch·ªçn --'; patientSearchInput.disabled = true; patientOptionsContainer.innerHTML = ''; validateInputs(); return; } patientSearchInput.disabled = false; patientSearchInput.placeholder = '-- Ch·ªçn ho·∫∑c g√µ ƒë·ªÉ t√¨m --'; const optionsHTML = recordsForDate.map((record, index) => `<div data-value="${record.maLk}" data-text="${index + 1}. ${record.hoTen} (M√£ LK: ${record.maLk})">${index + 1}. ${record.hoTen} (M√£ LK: ${record.maLk})</div>`).join(''); patientOptionsContainer.innerHTML = optionsHTML; patientOptionsContainer.querySelectorAll('div').forEach(option => { option.addEventListener('click', () => { patientSearchInput.value = option.dataset.text; patientSelectorValue.value = option.dataset.value; patientOptionsContainer.classList.remove('show'); renderPreview(option.dataset.value); validateInputs(); }); }); }
    patientSearchInput.addEventListener('click', (e) => { e.stopPropagation(); patientOptionsContainer.classList.toggle('show'); });
    patientSearchInput.addEventListener('input', () => { const filter = patientSearchInput.value.toLowerCase(); patientOptionsContainer.querySelectorAll('div').forEach(option => { const text = option.textContent.toLowerCase(); option.style.display = text.includes(filter) ? '' : 'none'; }); patientOptionsContainer.classList.add('show'); patientSelectorValue.value = ''; aiPreviewContainer.style.display = 'none'; validateInputs(); });
    document.addEventListener('click', () => { patientOptionsContainer.classList.remove('show'); });
    function validateInputs() { analyzeButton.disabled = !(patientSelectorValue.value && apiKeyInput.value); }
    apiKeyInput.addEventListener('input', validateInputs);
    analyzeButton.addEventListener('click', handleFullAnalysis);
    downloadHtmlButton.addEventListener('click', () => { if (currentAnalysisResult.html && currentAnalysisResult.patient) { const blob = new Blob([currentAnalysisResult.html], { type: 'text/html' }); const url = URL.createObjectURL(blob); const a = document.createElement('a'); a.href = url; a.download = `Phan_tich_AI_${currentAnalysisResult.patient.maLk}.html`; document.body.appendChild(a); a.click(); document.body.removeChild(a); URL.revokeObjectURL(url); } });

    async function handleFullAnalysis() {
        const maLk = patientSelectorValue.value;
        const apiKey = apiKeyInput.value;
        if (!maLk || !apiKey) { alert("Vui l√≤ng ch·ªçn h·ªì s∆° v√† nh·∫≠p API Key."); return; }
        aiLoading.classList.add('show');
        aiResultDiv.innerHTML = '';
        aiPreviewContainer.style.display = 'none';
        downloadHtmlButton.style.display = 'none';
        analyzeButton.disabled = true;
        try {
            const { originalHoSoData, generalFileInfo } = extractDataForAI(maLk);
            const anonymizedPatientInfo = anonymizePatientData(originalHoSoData.patientInfo, originalHoSoData.patientInfo.stt);
            const promptData = createAnonymizedRawDataString(originalHoSoData, generalFileInfo, anonymizedPatientInfo);
            const geminiResult = await getGeminiAnalysis(promptData, anonymizedPatientInfo, generalFileInfo, originalHoSoData, apiKey);
            if (geminiResult.success) {
                aiResultDiv.innerHTML = geminiResult.content;
                currentAnalysisResult.html = createPdfHtmlContent(geminiResult.content, originalHoSoData.patientInfo);
                currentAnalysisResult.patient = originalHoSoData.patientInfo;
                downloadHtmlButton.style.display = 'inline-block';
            } else {
                aiResultDiv.innerHTML = `<p style="color:red;"><b>L·ªói:</b> ${geminiResult.content}</p>`;
            }
        } catch (error) {
            console.error("L·ªói trong qu√° tr√¨nh ph√¢n t√≠ch:", error);
            aiResultDiv.innerHTML = `<p style="color:red;"><b>L·ªói h·ªá th·ªëng:</b> ${error.message}</p>`;
        } finally {
            aiLoading.classList.remove('show');
            analyzeButton.disabled = false;
        }
    }
    function extractDataForAI(maLk) {
    const record = globalData.allRecords.find(r => r.maLk === maLk);
    if (!record) throw new Error("Kh√¥ng t√¨m th·∫•y h·ªì s∆°.");
    const parser = new DOMParser();
    const xmlDoc = parser.parseFromString(globalData.xmlDataContent, 'text/xml');
    let targetHosoNode = null;
    const hosoNodes = xmlDoc.getElementsByTagName('HOSO');
    for (const hosoNode of hosoNodes) {
        const maLkNode = hosoNode.querySelector('MA_LK');
        if (maLkNode && maLkNode.textContent.trim() === maLk) {
            targetHosoNode = hosoNode;
            break;
        }
    }
    if (!targetHosoNode) throw new Error("Kh√¥ng t√¨m th·∫•y HOSO trong XML g·ªëc.");
    const getText = (element, ...selectors) => { if (!element) return ''; for (const selector of selectors) { const node = element.querySelector(selector); if (node && node.textContent) { const text = node.textContent.trim(); if (text) return text; } } return ''; };
    const getFileContent = (type) => { for (const fileNode of targetHosoNode.children) { if (fileNode.nodeName === 'FILEHOSO' && getText(fileNode, 'LOAIHOSO') === type) { return fileNode.querySelector('NOIDUNGFILE'); } } return null; };
    
    const tongHopNode = getFileContent('XML1').querySelector('TONG_HOP');
    const updatedPatientInfo = { ...record };
    if(tongHopNode) {
        updatedPatientInfo.chanDoanVao = getText(tongHopNode, 'CHAN_DOAN_VAO');
        updatedPatientInfo.maBenh = getText(tongHopNode, 'MA_BENH_CHINH');
        updatedPatientInfo.diaChi = getText(tongHopNode, 'DIA_CHI');
        updatedPatientInfo.lyDoVaoVien = getText(tongHopNode, 'LY_DO_VV');
        updatedPatientInfo.maHSBA = getText(tongHopNode, 'MA_HSBA');
        updatedPatientInfo.ngayTaiKham = getText(tongHopNode, 'NGAY_TAI_KHAM');
    }

    const chiTietThuocNode = getFileContent('XML2');
    const drugList = [];
    if(chiTietThuocNode) {
        chiTietThuocNode.querySelectorAll('CHI_TIET_THUOC').forEach((item, index) => {
            drugList.push({
                sttThuoc: index + 1,
                tenThuoc: getText(item, 'TEN_THUOC'),
                hamLuong: getText(item, 'HAM_LUONG'), // L·∫•y th√™m h√†m l∆∞·ª£ng
                lieuDung: getText(item, 'LIEU_DUNG'),
                cachDung: getText(item, 'CACH_DUNG'),
                soLuong: parseFloat(getText(item, 'SO_LUONG') || '0'),
                thanhTienBH: parseFloat(getText(item, 'THANH_TIEN_BH') || '0'),
                ngayThYLenh: formatDateTimeForDisplay(getText(item, 'NGAY_TH_YL')),
                maBacSi: getText(item, 'MA_BAC_SI'),
                tyleTT: getText(item, 'TYLE_TT_BH')
            });
        });
    }

    const chiTietDvktNode = getFileContent('XML3');
    const serviceList = [];
    if(chiTietDvktNode){
        chiTietDvktNode.querySelectorAll('CHI_TIET_DVKT').forEach((item, index) => {
             serviceList.push({
                sttDvkt: index + 1,
                maDvkt: getText(item, 'MA_DICH_VU'),
                tenDvkt: getText(item, 'TEN_DICH_VU'),
                soLuong: parseFloat(getText(item, 'SO_LUONG') || '0'),
                thanhTienBH: parseFloat(getText(item, 'THANH_TIEN_BH') || '0'),
                ngayThYLenh: formatDateTimeForDisplay(getText(item, 'NGAY_TH_YL')),
                maBacSi: getText(item, 'MA_BAC_SI'),
                nguoiThucHien: getText(item, 'NGUOI_THUC_HIEN'),
                tyleTT: getText(item, 'TYLE_TT_BH')
            });
        });
    }

    const xml4ContentNode = getFileContent('XML4');
    const xml4Details = [];
    if (xml4ContentNode) {
        xml4ContentNode.querySelectorAll('CHI_TIET_CLS').forEach((item, index) => {
            const maDichVu = getText(item, 'MA_DICH_VU');
            const correspondingService = serviceList.find(s => s.maDvkt === maDichVu);

            xml4Details.push({
                stt: index + 1,
                tenChiSo: getText(item, 'TEN_CHI_SO'),
                giaTri: getText(item, 'GIA_TRI'),
                donVi: getText(item, 'DON_VI_DO'),
                nguoiThucHien: correspondingService ? correspondingService.nguoiThucHien : '',
                maBsDocKq: getText(item, 'MA_BS_DOC_KQ'),
                ngayKQ: formatDateTimeForDisplay(getText(item, 'NGAY_KQ'))
            });
        });
    }

    const xml14ContentNode = getFileContent('XML14');
    let appointmentInfo = null;
    if (xml14ContentNode && xml14ContentNode.querySelector('CHI_TIEU_GIAYHEN_KHAMLAI')) {
        const henKhamNode = xml14ContentNode.querySelector('CHI_TIEU_GIAYHEN_KHAMLAI');
        appointmentInfo = {
            soGiayHen: getText(henKhamNode, 'SO_GIAYHEN_KL'),
            ngayHenKL: formatDateTimeForDisplay(getText(henKhamNode, 'NGAY_HEN_KL'))
        };
    }

    const originalHoSoData = {
        patientInfo: updatedPatientInfo,
        drugList: drugList,
        serviceList: serviceList,
        xml4Details: xml4Details,
        appointmentInfo: appointmentInfo,
        xml4RawContentForPrompt: xml4ContentNode ? xml4ContentNode.innerHTML.trim() : null,
        xml14RawContentForPrompt: xml14ContentNode ? xml14ContentNode.innerHTML.trim() : null,
    };

    const generalFileInfo = {
        maCSKCB: xmlDoc.querySelector('MACSKCB')?.textContent.trim(),
        ngayLapFile: formatDateTimeForDisplay(xmlDoc.querySelector('NGAYLAP')?.textContent.trim())
    };
    
    return { originalHoSoData, generalFileInfo };
}

    // ===================================================================
    // B∆Ø·ªöC 4: C√ÅC H√ÄM LOGIC CHO AI (Client-side)
    // ===================================================================
function renderPreview(maLk) {
    const { originalHoSoData } = extractDataForAI(maLk);
    if (!originalHoSoData) return;
    
    const pInfo = originalHoSoData.patientInfo;
    const drugs = originalHoSoData.drugList;
    const services = originalHoSoData.serviceList;
    const xml4Details = originalHoSoData.xml4Details;
    const appointmentInfo = originalHoSoData.appointmentInfo;

    // L·∫•y th√¥ng tin tr·∫°ng th√°i t·ª´ h·ªì s∆°
    let statusClass = 'status-success';
    let statusText = 'üü¢ H·ª£p l·ªá';
    if (pInfo.errors.length > 0) {
        const hasCritical = pInfo.errors.some(e => e.severity === 'critical');
        if (hasCritical) {
            statusClass = 'status-error';
            statusText = `üî¥ Nghi√™m tr·ªçng (${pInfo.errors.length} l·ªói)`;
        } else {
            statusClass = 'status-warning';
            statusText = `üü° C·∫£nh b√°o (${pInfo.errors.length} l·ªói)`;
        }
    }

    let previewHTML = `
        <div class="preview-section">
            <h3>
                üìã Th√¥ng tin B·ªánh nh√¢n
                <span class="status-badge ${statusClass}" style="margin-left: auto;">${statusText}</span>
            </h3>
            <div class="preview-info-grid">
                <div><span>M√£ LK:</span> <span>${escapeBasicHtml(pInfo.maLk)}</span></div>
                <div><span>H·ªç t√™n:</span> <span>${escapeBasicHtml(pInfo.hoTen)}</span></div>
                <div><span>M√£ th·∫ª BHYT:</span> <span>${escapeBasicHtml(pInfo.maThe)}</span></div>
                <div><span>Tu·ªïi:</span> <span>${new Date().getFullYear() - parseInt(pInfo.ngaySinh.substring(0,4))}</span></div>
                <div><span>Gi·ªõi t√≠nh:</span> <span>${pInfo.gioiTinh === '1' ? 'Nam' : 'N·ªØ'}</span></div>
                <div><span>ƒê·ªãa ch·ªâ:</span> <span>${escapeBasicHtml(pInfo.diaChi || '')}</span></div>
                <div style="grid-column: 1 / -1;"><span>Ch·∫©n ƒëo√°n:</span> <span>${escapeBasicHtml(pInfo.chanDoan)} (ICD: ${escapeBasicHtml(pInfo.maBenh)})</span></div>
                <div><span>L√Ω do v√†o vi·ªán:</span> <span>${escapeBasicHtml(pInfo.lyDoVaoVien || 'N/A')}</span></div>
                <div><span>Th·ªùi gian ƒëi·ªÅu tr·ªã:</span> <span>${formatDateTimeForDisplay(pInfo.ngayVao)} - ${formatDateTimeForDisplay(pInfo.ngayRa)}</span></div>
                <div><span>Ng√†y t√°i kh√°m:</span> <span>${formatDateTimeForDisplay(pInfo.ngayTaiKham) || 'N/A'}</span></div>
                <div><span>M√£ HSBA:</span> <span>${escapeBasicHtml(pInfo.maHSBA || 'N/A')}</span></div>
            </div>
        </div>
    `;

    if (drugs.length > 0) {
        previewHTML += `
            <div class="preview-section" style="margin-top: 20px;">
                <h3>üíä Danh s√°ch thu·ªëc</h3>
                <table class="preview-table">
                    <thead>
                        <tr>
                            <th>STT</th>
                            <th>T√™n thu·ªëc</th>
                            <th>H√†m l∆∞·ª£ng/C√°ch d√πng</th>
                            <th>SL</th>
                            <th>Ng√†y TH Y l·ªánh</th>
                            <th>T·ªâ l·ªá BH</th>
                            <th>Th√†nh ti·ªÅn BH</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${drugs.map((d, i) => {
                            const bsYLenh = staffNameMap.get(d.maBacSi) || d.maBacSi || 'N/A';
                            return `
                                <tr>
                                    <td>${i + 1}</td>
                                    <td>${escapeBasicHtml(d.tenThuoc)}</td>
                                    <td>
                                        ${escapeBasicHtml(d.hamLuong || d.lieuDung)}
                                        <br><small>${escapeBasicHtml(d.cachDung)}</small>
                                    </td>
                                    <td>${d.soLuong.toFixed(3)}</td>
                                    <td>
                                        ${d.ngayThYLenh}
                                        <br>
                                        <small><b>BS Y l·ªánh:</b> ${bsYLenh}</small>
                                    </td>
                                    <td>${d.tyleTT}%</td>
                                    <td>${formatCurrency(d.thanhTienBH)}</td>
                                </tr>
                            `;
                        }).join('')}
                    </tbody>
                </table>
            </div>
        `;
    }
    
    if (services.length > 0) {
         previewHTML += `
            <div class="preview-section" style="margin-top: 20px;">
                <h3>üíâ D·ªãch v·ª• k·ªπ thu·∫≠t (XML3)</h3>
                <table class="preview-table">
                    <thead><tr><th>STT</th><th>T√™n DVKT</th><th>Ng√†y TH Y l·ªánh</th><th>T·ªâ l·ªá BH</th><th>Th√†nh ti·ªÅn BH</th></tr></thead>
                    <tbody>
                        ${services.map((s, i) => {
                            const bsYLenh = staffNameMap.get(s.maBacSi) || s.maBacSi || 'N/A';
                            return `
                                <tr>
                                    <td>${i + 1}</td>
                                    <td>${escapeBasicHtml(s.tenDvkt)}</td>
                                    <td>
                                        ${s.ngayThYLenh}
                                        <br>
                                        <small><b>BS Y l·ªánh:</b> ${bsYLenh}</small>
                                    </td>
                                    <td>${s.tyleTT}%</td>
                                    <td>${formatCurrency(s.thanhTienBH)}</td>
                                </tr>
                            `;
                        }).join('')}
                    </tbody>
                </table>
            </div>
        `;
    }

    if (xml4Details.length > 0) {
        previewHTML += `
            <div class="preview-section" style="margin-top: 20px;">
                <h3>üî¨ Chi ti·∫øt C·∫≠n l√¢m s√†ng (XML4)</h3>
                <table class="preview-table">
                    <thead>
                        <tr>
                            <th>STT</th>
                            <th>T√™n Ch·ªâ S·ªë</th>
                            <th>Gi√° Tr·ªã</th>
                            <th>ƒê∆°n V·ªã</th>
                            <th>Ng∆∞·ªùi TH</th>
                            <th>BS ƒê·ªçc KQ</th>
                            <th>Ng√†y KQ</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${xml4Details.map((d, i) => {
                            const performerName = staffNameMap.get(d.nguoiThucHien) || d.nguoiThucHien || 'N/A';
                            const doctorName = staffNameMap.get(d.maBsDocKq) || d.maBsDocKq || 'N/A';
                            return `
                                <tr>
                                    <td>${i + 1}</td>
                                    <td>${escapeBasicHtml(d.tenChiSo)}</td>
                                    <td>${escapeBasicHtml(d.giaTri)}</td>
                                    <td>${escapeBasicHtml(d.donVi)}</td>
                                    <td>${escapeBasicHtml(performerName)}</td>
                                    <td>${escapeBasicHtml(doctorName)}</td>
                                    <td>${d.ngayKQ}</td>
                                </tr>
                            `;
                        }).join('')}
                    </tbody>
                </table>
            </div>
        `;
    }

    if (appointmentInfo) {
        previewHTML += `
            <div class="preview-section" style="margin-top: 20px;">
                <h3>üóìÔ∏è Gi·∫•y h·∫πn kh√°m l·∫°i (XML14)</h3>
                <div class="preview-info-grid">
                    <div><span>S·ªë gi·∫•y h·∫πn:</span> <span>${escapeBasicHtml(appointmentInfo.soGiayHen)}</span></div>
                    <div><span>Ng√†y h·∫πn kh√°m l·∫°i:</span> <span>${appointmentInfo.ngayHenKL}</span></div>
                </div>
            </div>
        `;
    }
    
    aiPreviewContainer.innerHTML = previewHTML;
    aiPreviewContainer.style.display = 'block';
}

    function anonymizePatientData(patientInfo, index) { const dob = patientInfo.ngaySinh; let age = 'N/A'; if (dob && dob.length >= 4) { const birthYear = parseInt(dob.substring(0, 4)); const currentYear = new Date().getFullYear(); age = currentYear - birthYear; } return { stt: index, maLK: patientInfo.maLk, hoTen: `BN_${String(index).padStart(3, '0')}`, tuoi: age, gioiTinh: patientInfo.gioiTinh === '1' ? 'Nam' : 'N·ªØ', canNang: patientInfo.canNang || 'N/A', chanDoanVao: patientInfo.chanDoanVao || 'N/A', chanDoanRaVien: patientInfo.chanDoan, maBenh: patientInfo.maBenh, maTheBHYT: "[ƒê√É ·∫®N]", gtTheTu: "[ƒê√É ·∫®N]", gtTheDen: "[ƒê√É ·∫®N]", ngayVao: formatDateTimeForDisplay(patientInfo.ngayVao), ngayRa: formatDateTimeForDisplay(patientInfo.ngayRa), }; }
    function createAnonymizedRawDataString(originalHoSoData, generalFileInfo, anonymizedPatientInfoForPrompt) { let text = `M√£ CSKCB (File): ${generalFileInfo.maCSKCB || 'N/A'}\n`; text += `Ng√†y l·∫≠p File XML: ${generalFileInfo.ngayLapFile || 'N/A'}\n`; text += `\n--- B·ªánh nh√¢n (STT: ${anonymizedPatientInfoForPrompt.stt || 'N/A'}, M√£ LK tham chi·∫øu: ${originalHoSoData.patientInfo.maLk || 'N/A'}) --- \n`; text += `H·ªç t√™n: ${anonymizedPatientInfoForPrompt.hoTen}\n`; text += `Tu·ªïi: ${anonymizedPatientInfoForPrompt.tuoi || 'N/A'}, Gi·ªõi t√≠nh: ${anonymizedPatientInfoForPrompt.gioiTinh || 'N/A'}, C√¢n n·∫∑ng: ${anonymizedPatientInfoForPrompt.canNang || 'N/A'} kg\n`; text += `Ch·∫©n ƒëo√°n v√†o vi·ªán: ${originalHoSoData.patientInfo.chanDoanVao || 'N/A'}\n`; text += `Ch·∫©n ƒëo√°n RV: ${anonymizedPatientInfoForPrompt.chanDoanRaVien || 'N/A'} (M√£: ${anonymizedPatientInfoForPrompt.maBenh || 'N/A'})\n`; text += `Th·∫ª BHYT: ${anonymizedPatientInfoForPrompt.maTheBHYT} (T·ª´ ${anonymizedPatientInfoForPrompt.gtTheTu} ƒë·∫øn ${anonymizedPatientInfoForPrompt.gtTheDen})\n`; text += `Ng√†y V√†o: ${anonymizedPatientInfoForPrompt.ngayVao || 'N/A'} - Ng√†y Ra: ${anonymizedPatientInfoForPrompt.ngayRa || 'N/A'}\n`; if (originalHoSoData.drugList && originalHoSoData.drugList.length > 0) { text += "\n--- Thu·ªëc ---\n"; originalHoSoData.drugList.forEach((drug) => { text += `- STT ${drug.sttThuoc}: ${drug.tenThuoc}, Li·ªÅu: ${drug.lieuDung}, C√°ch d√πng: ${drug.cachDung}, SL: ${drug.soLuong}, Ng√†y YL: ${drug.ngayYLenh}, M·ª©c h∆∞·ªüng: ${drug.mucHuong || 'N/A'}%\n`; }); } if (originalHoSoData.serviceList && originalHoSoData.serviceList.length > 0) { text += "\n--- DVKT ---\n"; originalHoSoData.serviceList.forEach((service) => { text += `- STT ${service.sttDvkt}: ${service.tenDvkt}, SL: ${service.soLuong}, Ng√†y YL: ${service.ngayYLenh}, M·ª©c h∆∞·ªüng: ${service.mucHuong || 'N/A'}%\n`; }); } if (originalHoSoData.xml4RawContentForPrompt) { text += "\n--- D·ªØ li·ªáu XML4 (K·∫øt qu·∫£ CLS) ---\n"; text += originalHoSoData.xml4RawContentForPrompt + "\n"; } if (originalHoSoData.xml14RawContentForPrompt) { text += "\n--- D·ªØ li·ªáu XML14 (Gi·∫•y h·∫πn) ---\n"; text += originalHoSoData.xml14RawContentForPrompt + "\n"; } return text; }
    function createPdfHtmlContent(analysisTextFromGemini, originalPatientInfo) { return `<html><head><meta charset="UTF-8"><title>Chi ti·∫øt HS v√† Ph√¢n t√≠ch AI - ${escapeBasicHtml(originalPatientInfo.maLk) || 'HoSo'}</title><style>body { font-family: 'DejaVu Sans', Arial, sans-serif; line-height: 1.5; margin: 20px; font-size: 11px; } h1 { color: #2c3e50; text-align: center; border-bottom: 1px solid #3498db; padding-bottom: 8px; font-size: 1.5em; margin-bottom: 15px;} h2 { color: #3498db; margin-top: 20px; border-bottom: 1px solid #bdc3c7; padding-bottom: 4px; font-size: 1.2em;} p { margin-bottom: 8px; text-align: justify;} hr { border: 0; height: 1px; background: #ccc; margin: 20px 0; } ul { margin-left: 20px; padding-left: 0;} li { margin-bottom: 5px; } pre { background-color: #f0f0f0; padding: 8px; border: 1px solid #ddd; border-radius: 4px; white-space: pre-wrap; word-wrap: break-word; font-size: 0.85em; } table { width: 100%; border-collapse: collapse; margin-top: 10px; font-size: 0.95em; } th, td { border: 1px solid #ccc; padding: 6px; text-align: left; } th { background-color: #f2f2f2; font-weight: bold; }</style></head><body>${analysisTextFromGemini}</body></html>`; }
   async function getGeminiAnalysis(promptData, patientInfoForPrompt, generalInfo, originalHoSoData, apiKey) {
        const API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=${apiKey}`;
        const fullPrompt = `B·∫°n l√† m·ªôt b√°c sƒ© ƒëa khoa danh ti·∫øng, d∆∞·ª£c sƒ© nhi·ªÅu nƒÉm kinh nghi·ªám, b·∫°n s·∫Ω kh√¥ng ƒë·ªÉ sai x√≥t trong ƒëi·ªÅu tr·ªã v√† ch·ªâ ƒë·ªãnh thu·ªëc sai v√† b·∫°n c≈©ng l√† chuy√™n gia v·ªÅ gi√°m ƒë·ªãnh b·∫£o hi·ªÉm y t·∫ø (d·ª±a v√†o c√¥ng vƒÉn 4750/qƒë-byt, 130/Qƒê-BYT, Th√¥ng t∆∞ 27/2023/TT-BYT v√† c√°c quy ƒë·ªãnh m·ªõi nh·∫•t v·ªÅ BHYT).
D·ª±a tr√™n th√¥ng tin h·ªì s∆° b·ªánh √°n XML ƒë∆∞·ª£c cung c·∫•p (bao g·ªìm t·∫•t c·∫£ d·ªØ li·ªáu XML t√≥m t·∫Øt v√† th√¥ng tin tham kh·∫£o t·ª´ t√¨m ki·∫øm web d∆∞·ªõi ƒë√¢y), h√£y t·∫°o n·ªôi dung HTML cho m·ªôt b√°o c√°o t√≥m t·∫Øt "PH√ÇN T√çCH D·ªÆ LI·ªÜU KH√ÅM CH·ªÆA B·ªÜNH".

**KI·ªÇM TRA CHI TI·∫æT:** Vui l√≤ng ph√¢n t√≠ch k·ªπ v√† nh·∫•n m·∫°nh c√°c ƒëi·ªÉm b·∫•t th∆∞·ªùng ho·∫∑c l·ªói ti·ªÅm ·∫©n (d√πng <b><font color='red'>[L·ªñI]</font></b> ho·∫∑c <b><font color='orange'>[C·∫¢NH B√ÅO]</font></b>) d·ª±a tr√™n c√°c quy t·∫Øc BHYT sau:

1. **TH·ªúI GIAN ƒêI·ªÄU TR·ªä:** - **Ng√†y Y L·ªánh vs Ng√†y Ra Vi·ªán:** Ng√†y y l·ªánh ('NGAY_YL' trong XML2/XML3) c·ªßa thu·ªëc/d·ªãch v·ª• KH√îNG ƒë∆∞·ª£c sau ng√†y ra vi·ªán ('NGAY_RA' trong XML1). ƒê√°nh d·∫•u r√µ c√°c tr∆∞·ªùng h·ª£p sai c√≥ th·ªÉ d·∫´n ƒë·∫øn t·ª´ ch·ªëi thanh to√°n BHYT.
   - **Th·ª© t·ª± Th·ªùi gian h·ª£p l√Ω:** Ki·ªÉm tra th·ªùi gian nh·∫≠p vi·ªán ('NGAY_VAO') ƒë·∫øn ra vi·ªán ('NGAY_RA'), so v·ªõi c√°c ng√†y y l·ªánh thu·ªëc/d·ªãch v·ª•. Nh·∫≠n di·ªán c√°c m·ªëc th·ªùi gian m√¢u thu·∫´n.

2. **THU·ªêC & LI·ªÄU D√ôNG (XML2):** - **M·ª©c h∆∞·ªüng: ('MUC_HUONG').
   - **Quy t·∫Øc li·ªÅu d√πng:** Ki·ªÉm tra ch·ªâ ƒë·ªãnh ('LIEU_DUNG') c√≥ tu√¢n th·ªß theo tu·ªïi/c√¢n n·∫∑ng v√† ph√°c ƒë·ªì chu·∫©n kh√¥ng? T√≠nh to√°n c·ª• th·ªÉ n·∫øu c√≥ th·ªÉ.
   - **Tr√πng l·∫∑p Thu·ªëc:** Ph√°t hi·ªán thu·ªëc k√™ tr√πng l·∫∑p c√πng c√¥ng d·ª•ng, c√πng th·ªùi k·ª≥ ƒëi·ªÅu tr·ªã.
   - **Ng√†y Y l·ªánh:** C√≥ n·∫±m trong kho·∫£ng Ng√†y v√†o - Ng√†y ra?

3. **D·ªäCH V·ª§ K·ª∏ THU·∫¨T & C·∫¨N L√ÇM S√ÄNG (XML3, XML4):**
   - **T·∫ßn su·∫•t h·ª£p l√Ω:** Ki·ªÉm tra c√°c x√©t nghi·ªám/d·ªãch v·ª• ('MA_DICH_VU' trong XML3) c√≥ t·∫ßn su·∫•t b·∫•t th∆∞·ªùng kh√¥ng, ƒë·∫∑c bi·ªát c√°c d·ªãch v·ª• l·∫∑p l·∫°i nhi·ªÅu l·∫ßn trong th·ªùi gian ng·∫Øn.
   - **M·ª©c h∆∞·ªüng: ('MUC_HUONG').
   - **Ch·ªâ ƒë·ªãnh theo ƒë·ªãnh m·ª©c:** ƒê·ªëi chi·∫øu d·ªãch v·ª• k·ªπ thu·∫≠t v·ªõi ch·∫©n ƒëo√°n ƒë·ªÉ ƒë√°nh gi√° s·ª± c·∫ßn thi·∫øt y t·∫ø theo quy ƒë·ªãnh BHYT.
   - **K·∫øt qu·∫£ CLS (XML4):** Ph√¢n t√≠ch k·∫øt qu·∫£ c·∫≠n l√¢m s√†ng c√≥ ph√π h·ª£p v·ªõi ch·∫©n ƒëo√°n v√† thu·ªëc ƒëi·ªÅu tr·ªã kh√¥ng. S·ª≠ d·ª•ng d·ªØ li·ªáu t·ª´ th·∫ª <CHITIEU_CHITIET_DICHVUCANLAMSANG> v√† <DSACH_CHI_TIET_CLS> n·∫øu c√≥ trong ph·∫ßn t√≥m t·∫Øt XML4.
   - **Ng√†y Y l·ªánh/KQ:** C√≥ n·∫±m trong kho·∫£ng Ng√†y v√†o - Ng√†y ra? NGAY_KQ >= NGAY_YL?

4. **M√É ICD & CH·∫®N ƒêO√ÅN:**
   - **T√≠nh ch√≠nh x√°c c·ªßa M√£ ICD:** Ki·ªÉm tra m√£ ICD ('MA_BENH_CHINH' trong XML1) c√≥ ch√≠nh x√°c v√† ph√π h·ª£p v·ªõi ch·∫©n ƒëo√°n ra vi·ªán kh√¥ng.
   - **Nh·∫•t qu√°n trong ch·∫©n ƒëo√°n:** So s√°nh ch·∫©n ƒëo√°n ban ƒë·∫ßu, ch·∫©n ƒëo√°n trong qu√° tr√¨nh ƒëi·ªÅu tr·ªã v√† ch·∫©n ƒëo√°n ra vi·ªán ƒë·ªÉ ph√°t hi·ªán m√¢u thu·∫´n.

5. **TH√îNG TIN H√ÄNH CH√çNH:**
   - **Th√¥ng tin Th·∫ª BHYT:** D·ªØ li·ªáu th·∫ª BHYT ('MA_THE_BHYT', 'GT_THE_TU', 'GT_THE_DEN') ƒë√£ ƒë∆∞·ª£c ·∫©n danh. Ch·ªâ nh·∫≠n x√©t v·ªÅ MUC_HUONG n·∫øu c√≥.
   - **T·ª∑ l·ªá thanh to√°n BHYT:** Ki·ªÉm tra t·ª∑ l·ªá ƒë∆∞·ª£c h∆∞·ªüng BHYT ('MUC_HUONG' trong XML2 v√† XML3, ho·∫∑c TYLE_TT trong XML1) c√≥ ph√π h·ª£p kh√¥ng.

**N·ªôi dung b√°o c√°o HTML c·∫ßn t·∫°o:**
B·∫Øt ƒë·∫ßu v·ªõi c√°c th√¥ng tin t√≥m t·∫Øt sau (L∆ØU √ù: Th√¥ng tin b·ªánh nh√¢n nh∆∞ H·ªç t√™n, M√£ th·∫ª BHYT ƒë√£ ƒë∆∞·ª£c ·∫©n danh cho m·ª•c ƒë√≠ch b·∫£o m·∫≠t khi g·ª≠i l√™n AI. H√£y gi·ªØ nguy√™n d·∫°ng ·∫©n danh ƒë√≥ trong b√°o c√°o c·ªßa b·∫°n):
  <h1>PH√ÇN T√çCH D·ªÆ LI·ªÜU KH√ÅM CH·ªÆA B·ªÜNH DO AI CUNG C·∫§P</h1>
  <p><b>M√£ CSKCB:</b> ${escapeBasicHtml(generalInfo.maCSKCB) || 'N/A'}</p>
  <p><b>Ng√†y l·∫≠p h·ªì s∆°:</b> ${escapeBasicHtml(generalInfo.ngayLapFile) || 'N/A'}</p>
  <p><b>B·ªánh nh√¢n (STT: ${escapeBasicHtml(patientInfoForPrompt.stt)}):</b> ${escapeBasicHtml(patientInfoForPrompt.hoTen)} - ${escapeBasicHtml(patientInfoForPrompt.tuoi?.toString()) || 'N/A'} tu·ªïi - Gi·ªõi t√≠nh: ${escapeBasicHtml(patientInfoForPrompt.gioiTinh) || 'N/A'} - C√¢n n·∫∑ng: ${escapeBasicHtml(patientInfoForPrompt.canNang) || 'N/A'} kg</p>
  <p>
  <b>Th√¥ng tin th·∫ª BHYT:</b> ${escapeBasicHtml(patientInfoForPrompt.maTheBHYT)} 
  (T·ª´: ${escapeBasicHtml(patientInfoForPrompt.gtTheTu)} ƒë·∫øn: ${escapeBasicHtml(patientInfoForPrompt.gtTheDen)})
</p>
  <p><b>M√£ LK (tham chi·∫øu n·ªôi b·ªô):</b> ${escapeBasicHtml(patientInfoForPrompt.maLK) || 'N/A'}</p>
  <p><b>Ch·∫©n ƒëo√°n v√†o vi·ªán:</b> ${escapeBasicHtml(patientInfoForPrompt.chanDoanVao) || 'N/A'}</p>
  <p><b>Ch·∫©n ƒëo√°n ra vi·ªán:</b> ${escapeBasicHtml(patientInfoForPrompt.chanDoanRaVien) || 'N/A'}</p>
  <p><b>M√£ ICD CH√çNH:</b> ${escapeBasicHtml(patientInfoForPrompt.maBenh) || 'N/A'}</p>
  <p><b>Th·ªùi gian ƒëi·ªÅu tr·ªã:</b> T·ª´ ${escapeBasicHtml(patientInfoForPrompt.ngayVao)} ƒë·∫øn ${escapeBasicHtml(patientInfoForPrompt.ngayRa) || 'N/A'}</p>
  <hr>

Ti·∫øp theo, ph√¢n t√≠ch chi ti·∫øt theo c√°c m·ª•c:
  <h2>1. Th√¥ng tin h√†nh ch√≠nh v√† quy·ªÅn l·ª£i BHYT:</h2>
       <p><i>ƒê√°nh gi√° quy·ªÅn l·ª£i BHYT:</i> (Ph√¢n t√≠ch MUC_HUONG, TYLE_TT. L∆∞u √Ω: Th√¥ng tin chi ti·∫øt th·∫ª BHYT ƒë√£ ƒë∆∞·ª£c ·∫©n danh.)</p>
 
  <h2>2. Ki·ªÉm tra m√£ ICD v√† ch·∫©n ƒëo√°n:</h2>
       <p><i>ƒê√°nh gi√° m√£ ICD:</i> (Ph√¢n t√≠ch m√£ ICD c√≥ ph√π h·ª£p v·ªõi ch·∫©n ƒëo√°n ra vi·ªán kh√¥ng)</p>
       <p><i>T√≠nh nh·∫•t qu√°n:</i> (So s√°nh ch·∫©n ƒëo√°n c√°c giai ƒëo·∫°n c·ªßa qu√° tr√¨nh ƒëi·ªÅu tr·ªã)</p>
 
  <h2>3. Ki·ªÉm tra th·ªùi gian ƒëi·ªÅu tr·ªã:</h2>
       <p><i>T·ªïng th·ªùi gian ƒëi·ªÅu tr·ªã:</i> (T√≠nh to√°n s·ªë ng√†y ƒëi·ªÅu tr·ªã, ƒë√°nh gi√° t√≠nh h·ª£p l√Ω, n·∫øu th·ªùi gian tr√™n 5 ph√∫t l√† h·ª£p l√≠, kh√¥ng b√°o l·ªói)</p>
       <p><i>Ki·ªÉm tra m·ªëc th·ªùi gian:</i> (Ph√¢n t√≠ch c√≥ m√¢u thu·∫´n v·ªÅ th·ªùi gian kh√¥ng, v√≠ d·ª• NGAY_YL so v·ªõi NGAY_VAO, NGAY_RA)</p>
       <p style="color: red;"><i>C√°c y l·ªánh sau ng√†y ra vi·ªán:</i> (Li·ªát k√™ chi ti·∫øt c√°c tr∆∞·ªùng h·ª£p y l·ªánh sau ng√†y ra vi·ªán)</p>
 
  <h2>4. Ph√¢n t√≠ch thu·ªëc ƒëi·ªÅu tr·ªã (XML2):</h2>
       <table border="1" style="width:100%; border-collapse: collapse;">
          <tr style="background-color: #f2f2f2;">
              <th>T√™n thu·ªëc</th><th>Li·ªÅu d√πng</th><th>C√°ch d√πng</th><th>S·ªë l∆∞·ª£ng</th><th>M·ª©c h∆∞·ªüng</th><th>Ng√†y y l·ªánh (NGAY_YL)</th><th>Ph√π h·ª£p ch·∫©n ƒëo√°n & Ch·ªëng ch·ªâ ƒë·ªãnh?</th><th>Li·ªÅu d√πng h·ª£p l√Ω?</th><th>L·ªói/C·∫£nh b√°o</th>
          </tr>
          </table>
       <p><i>Li·ªÅu d√πng b·∫•t th∆∞·ªùng:</i> (Chi ti·∫øt c√°c tr∆∞·ªùng h·ª£p li·ªÅu d√πng qu√° cao/th·∫•p theo tu·ªïi, c√¢n n·∫∑ng)</p>
       <p><i>Thu·ªëc tr√πng l·∫∑p:</i> (Li·ªát k√™ c√°c thu·ªëc tr√πng l·∫∑p c√πng c√¥ng d·ª•ng)</p>
       <p><i>Thu·ªëc kh√¥ng ph√π h·ª£p/ch·ªëng ch·ªâ ƒë·ªãnh:</i> (Chi ti·∫øt c√°c thu·ªëc kh√¥ng ph√π h·ª£p ho·∫∑c c√≥ ch·ªëng ch·ªâ ƒë·ªãnh v·ªõi ch·∫©n ƒëo√°n, tu·ªïi, gi·ªõi t√≠nh)</p>
 
  <h2>5. Ph√¢n t√≠ch d·ªãch v·ª• k·ªπ thu·∫≠t (XML3):</h2>
       <table border="1" style="width:100%; border-collapse: collapse;">
          <tr style="background-color: #f2f2f2;">
              <th>T√™n d·ªãch v·ª•</th><th>S·ªë l∆∞·ª£ng</th><th>Ng√†y y l·ªánh </th><th>M·ª©c h∆∞·ªüng</th><th>Ph√π h·ª£p ch·∫©n ƒëo√°n?</th><th>T·∫ßn su·∫•t h·ª£p l√Ω?</th><th>L·ªói/C·∫£nh b√°o</th>
          </tr>
          </table>
       <p><i>D·ªãch v·ª• t·∫ßn su·∫•t b·∫•t th∆∞·ªùng:</i> (Li·ªát k√™ d·ªãch v·ª• l·∫∑p l·∫°i nhi·ªÅu l·∫ßn trong th·ªùi gian ng·∫Øn)</p>
       <p><i>D·ªãch v·ª• kh√¥ng ph√π h·ª£p ch·∫©n ƒëo√°n:</i> (Li·ªát k√™ c√°c d·ªãch v·ª• kh√¥ng ph√π h·ª£p v·ªõi ch·∫©n ƒëo√°n)</p>
 
  <h2>6. Ph√¢n t√≠ch k·∫øt qu·∫£ c·∫≠n l√¢m s√†ng (XML4):</h2>
   <p>D∆∞·ªõi ƒë√¢y l√† n·ªôi dung XML4 n·∫øu c√≥, h√£y ph√¢n t√≠ch c√°c ch·ªâ s·ªë trong ƒë√≥:</p>
   <pre>${originalHoSoData.xml4RawContentForPrompt ? escapeBasicHtml(originalHoSoData.xml4RawContentForPrompt) : "Kh√¥ng c√≥ d·ªØ li·ªáu XML4."}</pre>
   <table border="1" style="width:100%; border-collapse: collapse;">
       <tr style="background-color: #f2f2f2;">
           <th>STT CLS</th><th>T√™n Ch·ªâ S·ªë/D·ªãch V·ª•</th><th>Gi√° tr·ªã</th><th>ƒê∆°n v·ªã</th><th>M√¥ t·∫£/K·∫øt lu·∫≠n</th><th>Ng√†y KQ</th><th>B·∫•t th∆∞·ªùng/Ph√π h·ª£p?</th>
       </tr>
       </table>
       <p><i>C√°c ch·ªâ s·ªë b·∫•t th∆∞·ªùng:</i> (Li·ªát k√™ c√°c k·∫øt qu·∫£ CLS b·∫•t th∆∞·ªùng, v√≠ d·ª• TEN_CHI_SO, GIA_TRI, MO_TA, KET_LUAN t·ª´ XML4)</p>
       <p><i>T∆∞∆°ng quan v·ªõi thu·ªëc ƒëi·ªÅu tr·ªã:</i> (Ph√¢n t√≠ch s·ª± ph√π h·ª£p gi·ªØa k·∫øt qu·∫£ CLS v√† thu·ªëc ƒëi·ªÅu tr·ªã)</p>
 
  <h2>7. Ki·ªÉm tra gi·∫•y h·∫πn kh√°m l·∫°i (XML14):</h2>
    <p>D∆∞·ªõi ƒë√¢y l√† n·ªôi dung XML14 n·∫øu c√≥:</p>
    <pre>${originalHoSoData.xml14RawContentForPrompt ? escapeBasicHtml(originalHoSoData.xml14RawContentForPrompt) : "Kh√¥ng c√≥ d·ªØ li·ªáu XML14."}</pre>
       <p><i>Th√¥ng tin h·∫πn kh√°m:</i> (Ph√¢n t√≠ch th√¥ng tin h·∫πn kh√°m NGAY_HEN_KL, SO_GIAYHEN_KL v√† t√≠nh h·ª£p l√Ω n·∫øu c√≥ trong XML14)</p>
 
  <h2>8. T·ªïng h·ª£p l·ªói ph√°t hi·ªán:</h2>
       <div style="background-color: #ffebee; padding: 15px; border-radius: 5px;">
           <h3 style="color: #c62828;">C√°c l·ªói nghi√™m tr·ªçng (c·∫ßn xem x√©t t·ª´ ch·ªëi thanh to√°n):</h3>
           <ul></ul>
           <h3 style="color: #ff8f00;">C√°c c·∫£nh b√°o c·∫ßn l∆∞u √Ω (c√≥ th·ªÉ c·∫ßn gi·∫£i tr√¨nh):</h3>
           <ul></ul>
       </div>
 
  <h2>9. Khuy·∫øn ngh·ªã:</h2>
       <div style="background-color: #e8f5e9; padding: 15px; border-radius: 5px;">
           <ul></ul>
       </div>
       
  <h2>10. T·ª´ ch·ªëi tr√°ch nhi·ªám:</h1>
 <div style="background-color: #fff3cd; padding: 15px; border: 2px solid #ffeeba; border-radius: 5px; margin: 15px 0;">
   <p style="font-weight: bold; color: #856404; font-size: 16px; text-align: center; text-transform: uppercase; margin-bottom: 10px;">‚ö†Ô∏è L∆ØU √ù QUAN TR·ªåNG ‚ö†Ô∏è</p>
   <p style="font-weight: bold; text-align: center;">B√°o c√°o n√†y ƒë∆∞·ª£c t·∫°o b·ªüi AI theo y√™u c·∫ßu c·ªßa Anh Khoa - IT Trung t√¢m Y t·∫ø Huy·ªán C·ªß Chi.</p>
   <p style="text-align: center; font-weight: bold;">ƒê√¢y CH·ªà L√Ä C√îNG C·ª§ H·ªñ TR·ª¢, m·ªçi quy·∫øt ƒë·ªãnh cu·ªëi c√πng PH·∫¢I do chuy√™n gia y t·∫ø v√† y b√°c sƒ© ƒë∆∞a ra.</p>
</div>

<h3>D·ªØ li·ªáu XML t√≥m t·∫Øt (ƒë√£ ·∫©n danh m·ªôt ph·∫ßn):</h3>
<pre>${escapeBasicHtml(promptData)}</pre>

H√£y ƒë·∫£m b·∫£o to√†n b·ªô ph·∫£n h·ªìi l√† HTML ho√†n ch·ªânh, ng·∫Øn g·ªçn, tu√¢n th·ªß c·∫•u tr√∫c y√™u c·∫ßu v√† n√™u b·∫≠t ƒë∆∞·ª£c c√°c l·ªói/b·∫•t th∆∞·ªùng theo quy t·∫Øc. Ch·ªâ tr·∫£ l·ªùi b·∫±ng n·ªôi dung HTML cho b√°o c√°o.`;
        try {
            const response = await fetch(API_URL, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ contents: [{ parts: [{ text: fullPrompt }] }], generationConfig: { temperature: 0.2, maxOutputTokens: 8192 } }) });
            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(`L·ªói API: ${errorData.error?.message || response.statusText}`);
            }
            const data = await response.json();
            let analysisHtmlContent = data.candidates?.[0]?.content?.parts?.[0]?.text || "<p>Kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ AI.</p>";
            if (analysisHtmlContent.startsWith("```html")) {
                analysisHtmlContent = analysisHtmlContent.substring(7).trim();
            }
            if (analysisHtmlContent.endsWith("```")) {
                analysisHtmlContent = analysisHtmlContent.substring(0, analysisHtmlContent.length - 3).trim();
            }
            return { success: true, content: analysisHtmlContent };
        } catch (error) {
            console.error("L·ªói g·ªçi Gemini API:", error);
            return { success: false, content: error.message };
        }
    }
});
