/**
 * FILE M·ªöI: gemini_analysis.js
 * =============================
 * Version 5 (Preview Feature):
 * - T√çNH NƒÇNG M·ªöI: Th√™m khu v·ª±c xem tr∆∞·ªõc chi ti·∫øt h·ªì s∆° b·ªánh nh√¢n tr∆∞·ªõc khi g·ª≠i ph√¢n t√≠ch AI.
 *
 * File n√†y ch·ª©a c√°c ch·ª©c nƒÉng b·ªï sung ƒë∆∞·ª£c y√™u c·∫ßu.
 * N√≥ ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ kh√¥ng ch·ªânh s·ª≠a tr·ª±c ti·∫øp v√†o file index.html hay script.js g·ªëc.
 * M·ªçi th·ª© (HTML, CSS, Logic) ƒë·ªÅu ƒë∆∞·ª£c ti√™m v√†o trang m·ªôt c√°ch t·ª± ƒë·ªông khi t·∫£i.
 */

// Global helper function
const escapeBasicHtml = (str) => str ? String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;') : '';

document.addEventListener('DOMContentLoaded', () => {
    console.log("Gemini Analysis feature v5 (Preview Feature) loaded.");

    // ===================================================================
    // B∆Ø·ªöC 1: TI√äM CSS
    // ===================================================================
    const aiStyles = `
        /* ... CSS c≈© (gi·ªØ nguy√™n) ... */
        .tab-button.has-dropdown { position: relative; } .ai-dropdown-content { display: none; position: absolute; top: 100%; left: 0; background-color: #f1f1f1; min-width: 100%; box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2); z-index: 1002; border-radius: 0 0 8px 8px; overflow: hidden; animation: fadeIn 0.3s ease-out; } .tab-button.has-dropdown:hover .ai-dropdown-content { display: block; } .ai-dropdown-content a { color: black; padding: 12px 16px; text-decoration: none; display: block; text-align: left; font-size: 0.95em; } .ai-dropdown-content a:hover { background-color: #ddd; } body.dark .tab-button.has-dropdown .ai-dropdown-content { background-color: #1f2937; } body.dark .ai-dropdown-content a { color: #e5e7eb; } body.dark .ai-dropdown-content a:hover { background-color: #374151; }
        .ai-modal { display: none; position: fixed; z-index: 2000; left: 0; top: 0; width: 100%; height: 100%; overflow: auto; background-color: rgba(0,0,0,0.6); backdrop-filter: blur(5px); align-items: center; justify-content: center; } .ai-modal.show { display: flex; }
        .ai-modal-content { background-color: #fefefe; margin: auto; padding: 0; border: 1px solid #888; width: 90%; max-width: 900px; border-radius: 15px; box-shadow: 0 10px 30px rgba(0,0,0,0.2); animation: fadeInScale 0.4s ease-out; display: flex; flex-direction: column; max-height: 90vh; }
        body.dark .ai-modal-content { background: #0f172a; border-color: #374151; }
        .ai-modal-header { padding: 20px; border-bottom: 1px solid #eee; }
        body.dark .ai-modal-header { border-bottom-color: #374151; }
        .ai-modal-header h2 { margin: 0; font-size: 1.5em; }
        .ai-modal-body { padding: 25px; display: flex; flex-direction: column; gap: 20px; overflow-y: auto; }
        .ai-modal-footer { padding: 20px; border-top: 1px solid #eee; text-align: right; }
        body.dark .ai-modal-footer { border-top-color: #374151; }
        .searchable-select-container { position: relative; } .searchable-select-input { width: 100%; cursor: pointer; background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%23343a40' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M2 5l6 6 6-6'/%3e%3c/svg%3e"); background-repeat: no-repeat; background-position: right 0.75rem center; background-size: 16px 12px; } .searchable-select-options { display: none; position: absolute; top: 100%; left: 0; right: 0; max-height: 200px; overflow-y: auto; border: 1px solid #ccc; border-radius: 8px; background: white; z-index: 2001; } .searchable-select-options.show { display: block; } .searchable-select-options div { padding: 10px; cursor: pointer; } .searchable-select-options div:hover, .searchable-select-options div.selected { background-color: #f0f0f0; } body.dark .searchable-select-options { background: #1f2937; border-color: #374151; } body.dark .searchable-select-options div:hover, body.dark .searchable-select-options div.selected { background-color: #374151; }
        #aiAnalysisResult { font-size: 14px; line-height: 1.6; } #aiAnalysisResult h1 { font-size: 1.8em; color: #2c3e50; border-bottom: 2px solid #3498db; padding-bottom: 10px; margin-bottom: 20px; text-align: center; } #aiAnalysisResult h2 { font-size: 1.4em; color: #3498db; margin-top: 25px; border-bottom: 1px solid #bdc3c7; padding-bottom: 5px; } #aiAnalysisResult table { width: 100%; border-collapse: collapse; margin-top: 15px; font-size: 0.95em; } #aiAnalysisResult th, #aiAnalysisResult td { border: 1px solid #ccc; padding: 8px; text-align: left; } #aiAnalysisResult th { background-color: #f2f2f2; font-weight: bold; } #aiAnalysisResult pre { background-color: #f0f0f0; padding: 10px; border: 1px solid #ddd; border-radius: 5px; white-space: pre-wrap; word-wrap: break-word; font-size: 0.9em; } body.dark #aiAnalysisResult h1 { color: #e5e7eb; border-bottom-color: #4f46e5; } body.dark #aiAnalysisResult h2 { color: #818cf8; border-bottom-color: #374151; } body.dark #aiAnalysisResult th { background-color: #2c3a4b; border-color: #374151; } body.dark #aiAnalysisResult td { border-color: #374151; } body.dark #aiAnalysisResult pre { background-color: #111827; border-color: #374151; }

        /* ========== M·ªöI: CSS CHO KHU V·ª∞C XEM TR∆Ø·ªöC ========== */
        #aiPreviewContainer {
            margin-top: 20px;
            padding: 20px;
            border: 1px solid #e1e8ed;
            border-radius: 10px;
            background-color: #f8f9ff;
            display: none; /* ·∫®n ban ƒë·∫ßu */
        }
        body.dark #aiPreviewContainer {
            background-color: #111827;
            border-color: #374151;
        }
        .preview-section h3 {
            font-size: 1.3em;
            color: #3498db;
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 1px solid #dee2e6;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        body.dark .preview-section h3 {
            border-bottom-color: #374151;
        }
        .preview-info-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 12px 25px;
            font-size: 1em;
        }
        .preview-info-grid div {
            display: flex;
        }
        .preview-info-grid div > span:first-child {
            font-weight: 600;
            color: #6c757d;
            margin-right: 8px;
            flex-shrink: 0;
        }
        body.dark .preview-info-grid div > span:first-child {
            color: #9ca3af;
        }
        .preview-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 10px;
        }
        .preview-table th, .preview-table td {
            border: 1px solid #dee2e6;
            padding: 10px;
            text-align: left;
            font-size: 0.95em;
        }
        .preview-table th {
            background-color: #e9ecef;
        }
        body.dark .preview-table th, body.dark .preview-table td {
            border-color: #374151;
        }
        body.dark .preview-table th {
            background-color: #2c3a4b;
        }
    `;
    const styleSheet = document.createElement("style");
    styleSheet.innerText = aiStyles;
    document.head.appendChild(styleSheet);

    // ===================================================================
    // B∆Ø·ªöC 2: TI√äM HTML
    // ===================================================================
    const validatorTabButton = document.querySelector("button[onclick*=\"'validatorTab'\"]");
    if (validatorTabButton) {
        validatorTabButton.classList.add('has-dropdown');
        validatorTabButton.innerHTML = `
            <span>üìã Ki·ªÉm tra XML</span>
            <div class="ai-dropdown-content">
                <a href="#" id="openAiAnalysisModal"> Xem chi ti·∫øt h·ªì s∆° v√† ü§ñ</a>
            </div>
        `;
    }
    const aiModalHTML = `
        <div id="aiAnalysisModal" class="ai-modal">
            <div class="ai-modal-content">
                <div class="ai-modal-header">
                    <h2>Xem chi ti·∫øt h·ªì s∆° v√† ü§ñ Ph√¢n t√≠ch AI</h2>
                </div>
                <div class="ai-modal-body">
                    <div class="filter-group">
                        <label for="patientSearchInput">Ch·ªçn ho·∫∑c t√¨m ki·∫øm h·ªì s∆°:</label>
                        <div class="searchable-select-container">
                            <input type="text" id="patientSearchInput" class="filter-input searchable-select-input" placeholder="-- Ch·ªçn ho·∫∑c g√µ ƒë·ªÉ t√¨m --">
                            <div id="patientOptions" class="searchable-select-options"></div>
                        </div>
                         <input type="hidden" id="patientSelectorValue">
                    </div>
                    <div class="filter-group">
                        <label for="apiKeyInput">Nh·∫≠p Gemini API Key c·ªßa b·∫°n:</label>
                        <input type="password" id="apiKeyInput" class="filter-input" placeholder="D√°n API Key v√†o ƒë√¢y">
                        <p class="api-key-note">API Key ch·ªâ ƒë∆∞·ª£c d√πng cho phi√™n n√†y v√† kh√¥ng ƒë∆∞·ª£c l∆∞u tr·ªØ.</p>
                    </div>
                    
                    <!-- M·ªöI: Khu v·ª±c xem tr∆∞·ªõc -->
                    <div id="aiPreviewContainer"></div>

                    <div class="loading" id="aiLoading">
                        <div class="spinner"></div>
                        <p>AI ƒëang ph√¢n t√≠ch h·ªì s∆°... Qu√° tr√¨nh n√†y c√≥ th·ªÉ m·∫•t m·ªôt ch√∫t th·ªùi gian.</p>
                    </div>
                    <div id="aiAnalysisResult"><p>K·∫øt qu·∫£ ph√¢n t√≠ch s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã t·∫°i ƒë√¢y.</p></div>
                </div>
                <div class="ai-modal-footer">
                    <button id="closeAiModalButton" class="btn btn-warning">ƒê√≥ng</button>
                    <button id="downloadHtmlButton" class="btn btn-success" style="display: none;">üì• T·∫£i HTML</button>
                    <button id="analyzeWithAiButton" class="btn btn-primary" disabled>üöÄ B·∫Øt ƒë·∫ßu ph√¢n t√≠ch</button>
                </div>
            </div>
        </div>
    `;
    document.body.insertAdjacentHTML('beforeend', aiModalHTML);

    // ===================================================================
    // B∆Ø·ªöC 3: LOGIC V√Ä S·ª∞ KI·ªÜN
    // ===================================================================
    const openAiModalButton = document.getElementById('openAiAnalysisModal');
    const aiModal = document.getElementById('aiAnalysisModal');
    const closeAiModalButton = document.getElementById('closeAiModalButton');
    const patientSearchInput = document.getElementById('patientSearchInput');
    const patientOptionsContainer = document.getElementById('patientOptions');
    const patientSelectorValue = document.getElementById('patientSelectorValue');
    const analyzeButton = document.getElementById('analyzeWithAiButton');
    const apiKeyInput = document.getElementById('apiKeyInput');
    const aiResultDiv = document.getElementById('aiAnalysisResult');
    const aiLoading = document.getElementById('aiLoading');
    const downloadHtmlButton = document.getElementById('downloadHtmlButton');
    const aiPreviewContainer = document.getElementById('aiPreviewContainer');

    let currentAnalysisResult = { html: '', patient: null };

    openAiModalButton.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        populatePatientSelector();
        aiModal.classList.add('show');
    });

    closeAiModalButton.addEventListener('click', () => aiModal.classList.remove('show'));
    aiModal.addEventListener('click', (e) => {
        if (e.target === aiModal) {
            aiModal.classList.remove('show');
        }
    });

    function populatePatientSelector() {
        if (!globalData || !globalData.allRecords || globalData.allRecords.length === 0) {
            patientSearchInput.placeholder = '-- Ch∆∞a c√≥ d·ªØ li·ªáu t·ª´ tab "Ki·ªÉm tra XML" --';
            patientSearchInput.disabled = true;
            return;
        }
        
        patientSearchInput.disabled = false;
        patientSearchInput.placeholder = '-- Ch·ªçn ho·∫∑c g√µ ƒë·ªÉ t√¨m --';
        
        const optionsHTML = globalData.allRecords.map((record, index) => 
            `<div data-value="${record.maLk}" data-text="${index + 1}. ${record.hoTen} (M√£ LK: ${record.maLk})">${index + 1}. ${record.hoTen} (M√£ LK: ${record.maLk})</div>`
        ).join('');
        patientOptionsContainer.innerHTML = optionsHTML;
        
        // Add events to new options
        patientOptionsContainer.querySelectorAll('div').forEach(option => {
            option.addEventListener('click', () => {
                patientSearchInput.value = option.dataset.text;
                patientSelectorValue.value = option.dataset.value;
                patientOptionsContainer.classList.remove('show');
                renderPreview(option.dataset.value); // M·ªöI: Hi·ªÉn th·ªã xem tr∆∞·ªõc
                validateInputs();
            });
        });
    }

    patientSearchInput.addEventListener('click', (e) => {
        e.stopPropagation();
        patientOptionsContainer.classList.toggle('show');
    });
    
    patientSearchInput.addEventListener('input', () => {
        const filter = patientSearchInput.value.toLowerCase();
        patientOptionsContainer.querySelectorAll('div').forEach(option => {
            const text = option.textContent.toLowerCase();
            option.style.display = text.includes(filter) ? '' : 'none';
        });
        patientOptionsContainer.classList.add('show');
        patientSelectorValue.value = ''; // Clear selection while searching
        aiPreviewContainer.style.display = 'none'; // ·∫®n xem tr∆∞·ªõc khi ƒëang t√¨m
        validateInputs();
    });
    
    document.addEventListener('click', () => {
        patientOptionsContainer.classList.remove('show');
    });

    function validateInputs() {
        analyzeButton.disabled = !(patientSelectorValue.value && apiKeyInput.value);
    }
    apiKeyInput.addEventListener('input', validateInputs);

    analyzeButton.addEventListener('click', handleFullAnalysis);
    downloadHtmlButton.addEventListener('click', () => {
        if (currentAnalysisResult.html && currentAnalysisResult.patient) {
            const blob = new Blob([currentAnalysisResult.html], { type: 'text/html' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `Phan_tich_AI_${currentAnalysisResult.patient.maLk}.html`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        }
    });

    async function handleFullAnalysis() {
        const maLk = patientSelectorValue.value;
        const apiKey = apiKeyInput.value;
        if (!maLk || !apiKey) {
            alert("Vui l√≤ng ch·ªçn h·ªì s∆° v√† nh·∫≠p API Key.");
            return;
        }

        aiLoading.classList.add('show');
        aiResultDiv.innerHTML = '';
        aiPreviewContainer.style.display = 'none'; // ·∫®n xem tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu ph√¢n t√≠ch
        downloadHtmlButton.style.display = 'none';
        analyzeButton.disabled = true;

        try {
            const { originalHoSoData, generalFileInfo } = extractDataForAI(maLk);
            const anonymizedPatientInfo = anonymizePatientData(originalHoSoData.patientInfo, originalHoSoData.patientInfo.stt);
            const promptData = createAnonymizedRawDataString(originalHoSoData, generalFileInfo, anonymizedPatientInfo);
            const geminiResult = await getGeminiAnalysis(promptData, anonymizedPatientInfo, generalFileInfo, originalHoSoData, apiKey);

            if (geminiResult.success) {
                aiResultDiv.innerHTML = geminiResult.content;
                currentAnalysisResult.html = createPdfHtmlContent(geminiResult.content, originalHoSoData.patientInfo);
                currentAnalysisResult.patient = originalHoSoData.patientInfo;
                downloadHtmlButton.style.display = 'inline-block';
            } else {
                aiResultDiv.innerHTML = `<p style="color:red;"><b>L·ªói:</b> ${geminiResult.content}</p>`;
            }
        } catch (error) {
            console.error("L·ªói trong qu√° tr√¨nh ph√¢n t√≠ch:", error);
            aiResultDiv.innerHTML = `<p style="color:red;"><b>L·ªói h·ªá th·ªëng:</b> ${error.message}</p>`;
        } finally {
            aiLoading.classList.remove('show');
            analyzeButton.disabled = false;
        }
    }
    
    // ===================================================================
    // B∆Ø·ªöC 4: C√ÅC H√ÄM LOGIC CHO AI (Client-side)
    // ===================================================================
    function renderPreview(maLk) {
        const { originalHoSoData } = extractDataForAI(maLk);
        if (!originalHoSoData) return;
        
        const pInfo = originalHoSoData.patientInfo;
        const drugs = originalHoSoData.drugList;
        const services = originalHoSoData.serviceList;

        let previewHTML = `
            <div class="preview-section">
                <h3>üìã Th√¥ng tin B·ªánh nh√¢n</h3>
                <div class="preview-info-grid">
                    <div><span>M√£ LK:</span> <span>${escapeBasicHtml(pInfo.maLk)}</span></div>
                    <div><span>H·ªç t√™n:</span> <span>${escapeBasicHtml(pInfo.hoTen)}</span></div>
                    <div><span>M√£ th·∫ª BHYT:</span> <span>${escapeBasicHtml(pInfo.maThe)}</span></div>
                    <div><span>Tu·ªïi:</span> <span>${new Date().getFullYear() - parseInt(pInfo.ngaySinh.substring(0,4))}</span></div>
                    <div><span>Gi·ªõi t√≠nh:</span> <span>${pInfo.gioiTinh === '1' ? 'Nam' : 'N·ªØ'}</span></div>
                    <div><span>ƒê·ªãa ch·ªâ:</span> <span>${escapeBasicHtml(pInfo.diaChi || '')}</span></div>
                    <div style="grid-column: 1 / -1;"><span>Ch·∫©n ƒëo√°n:</span> <span>${escapeBasicHtml(pInfo.chanDoan)} (ICD: ${escapeBasicHtml(pInfo.maBenh)})</span></div>
                </div>
            </div>
        `;

        if (drugs.length > 0) {
            previewHTML += `
                <div class="preview-section" style="margin-top: 20px;">
                    <h3>üíä Danh s√°ch thu·ªëc</h3>
                    <table class="preview-table">
                        <thead><tr><th>STT</th><th>T√™n thu·ªëc</th><th>Li·ªÅu/C√°ch d√πng</th><th>SL</th><th>ƒê∆°n gi√° BH</th><th>Th√†nh ti·ªÅn BH</th></tr></thead>
                        <tbody>
                            ${drugs.map((d, i) => `
                                <tr>
                                    <td>${i + 1}</td>
                                    <td>${escapeBasicHtml(d.tenThuoc)}</td>
                                    <td>${escapeBasicHtml(d.lieuDung)} / ${escapeBasicHtml(d.cachDung)}</td>
                                    <td>${d.soLuong}</td>
                                    <td>${formatCurrency(d.donGia)}</td>
                                    <td>${formatCurrency(d.thanhTienBH)}</td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                </div>
            `;
        }
        
        if (services.length > 0) {
             previewHTML += `
                <div class="preview-section" style="margin-top: 20px;">
                    <h3>üíâ D·ªãch v·ª• k·ªπ thu·∫≠t (XML3)</h3>
                    <table class="preview-table">
                        <thead><tr><th>STT</th><th>T√™n DVKT</th><th>SL</th><th>ƒê∆°n gi√° BH</th><th>Th√†nh ti·ªÅn BH</th><th>Ng√†y YL</th></tr></thead>
                        <tbody>
                            ${services.map((s, i) => `
                                <tr>
                                    <td>${i + 1}</td>
                                    <td>${escapeBasicHtml(s.tenDvkt)}</td>
                                    <td>${s.soLuong}</td>
                                    <td>${formatCurrency(s.donGiaBH)}</td>
                                    <td>${formatCurrency(s.thanhTienBH)}</td>
                                    <td>${s.ngayYLenh}</td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                </div>
            `;
        }
        
        aiPreviewContainer.innerHTML = previewHTML;
        aiPreviewContainer.style.display = 'block';
    }

    function extractDataForAI(maLk) {
        const record = globalData.allRecords.find(r => r.maLk === maLk);
        if (!record) throw new Error("Kh√¥ng t√¨m th·∫•y h·ªì s∆°.");
        const parser = new DOMParser();
        const xmlDoc = parser.parseFromString(globalData.xmlDataContent, 'text/xml');
        let targetHosoNode = null;
        const hosoNodes = xmlDoc.getElementsByTagName('HOSO');
        for (const hosoNode of hosoNodes) {
            const maLkNode = hosoNode.querySelector('MA_LK');
            if (maLkNode && maLkNode.textContent.trim() === maLk) {
                targetHosoNode = hosoNode;
                break;
            }
        }
        if (!targetHosoNode) throw new Error("Kh√¥ng t√¨m th·∫•y HOSO trong XML g·ªëc.");
        const getText = (element, ...selectors) => { if (!element) return ''; for (const selector of selectors) { const node = element.querySelector(selector); if (node && node.textContent) { const text = node.textContent.trim(); if (text) return text; } } return ''; };
        const getFileContent = (type) => { for (const fileNode of targetHosoNode.children) { if (fileNode.nodeName === 'FILEHOSO' && getText(fileNode, 'LOAIHOSO') === type) { return fileNode.querySelector('NOIDUNGFILE'); } } return null; };
        
        // S·ª¨A L·ªñI: L·∫•y l·∫°i th√¥ng tin t·ª´ XML1 node thay v√¨ record object
        const tongHopNode = getFileContent('XML1').querySelector('TONG_HOP');
        const updatedPatientInfo = { ...record };
        if(tongHopNode) {
            updatedPatientInfo.chanDoanVao = getText(tongHopNode, 'CHAN_DOAN_VAO');
            updatedPatientInfo.maBenh = getText(tongHopNode, 'MA_BENH_CHINH');
            updatedPatientInfo.diaChi = getText(tongHopNode, 'DIA_CHI');
        }

        const chiTietThuocNode = getFileContent('XML2');
        const drugList = [];
        if(chiTietThuocNode) {
            chiTietThuocNode.querySelectorAll('CHI_TIET_THUOC').forEach((item, index) => {
                drugList.push({
                    sttThuoc: index + 1,
                    tenThuoc: getText(item, 'TEN_THUOC'),
                    lieuDung: getText(item, 'LIEU_DUNG'),
                    cachDung: getText(item, 'CACH_DUNG'),
                    soLuong: parseFloat(getText(item, 'SO_LUONG') || '0'),
                    donGia: parseFloat(getText(item, 'DON_GIA_BH') || '0'),
                    thanhTienBH: parseFloat(getText(item, 'THANH_TIEN_BH') || '0'),
                    ngayYLenh: formatDateTimeForDisplay(getText(item, 'NGAY_YL')),
                    mucHuong: getText(item, 'MUC_HUONG')
                });
            });
        }

        const chiTietDvktNode = getFileContent('XML3');
        const serviceList = [];
        if(chiTietDvktNode){
            chiTietDvktNode.querySelectorAll('CHI_TIET_DVKT').forEach((item, index) => {
                 serviceList.push({
                    sttDvkt: index + 1,
                    tenDvkt: getText(item, 'TEN_DICH_VU'),
                    soLuong: parseFloat(getText(item, 'SO_LUONG') || '0'),
                    donGiaBH: parseFloat(getText(item, 'DON_GIA_BH') || '0'),
                    thanhTienBH: parseFloat(getText(item, 'THANH_TIEN_BH') || '0'),
                    ngayYLenh: formatDateTimeForDisplay(getText(item, 'NGAY_YL')),
                    mucHuong: getText(item, 'MUC_HUONG')
                });
            });
        }

        const xml4ContentNode = getFileContent('XML4');
        const xml14ContentNode = getFileContent('XML14');

        const originalHoSoData = {
            patientInfo: updatedPatientInfo,
            drugList: drugList,
            serviceList: serviceList,
            xml4RawContentForPrompt: xml4ContentNode ? xml4ContentNode.innerHTML.trim() : null,
            xml14RawContentForPrompt: xml14ContentNode ? xml14ContentNode.innerHTML.trim() : null,
        };

        const generalFileInfo = {
            maCSKCB: xmlDoc.querySelector('MACSKCB')?.textContent.trim(),
            ngayLapFile: formatDateTimeForDisplay(xmlDoc.querySelector('NGAYLAP')?.textContent.trim())
        };
        
        return { originalHoSoData, generalFileInfo };
    }
    
    // C√°c h√†m helper c√≤n l·∫°i
    function anonymizePatientData(patientInfo, index) { const dob = patientInfo.ngaySinh; let age = 'N/A'; if (dob && dob.length >= 4) { const birthYear = parseInt(dob.substring(0, 4)); const currentYear = new Date().getFullYear(); age = currentYear - birthYear; } return { stt: index, maLK: patientInfo.maLk, hoTen: `BN_${String(index).padStart(3, '0')}`, tuoi: age, gioiTinh: patientInfo.gioiTinh === '1' ? 'Nam' : 'N·ªØ', canNang: patientInfo.canNang || 'N/A', chanDoanVao: patientInfo.chanDoanVao || 'N/A', chanDoanRaVien: patientInfo.chanDoan, maBenh: patientInfo.maBenh, maTheBHYT: "[ƒê√É ·∫®N]", gtTheTu: "[ƒê√É ·∫®N]", gtTheDen: "[ƒê√É ·∫®N]", ngayVao: formatDateTimeForDisplay(patientInfo.ngayVao), ngayRa: formatDateTimeForDisplay(patientInfo.ngayRa), }; }
    function createAnonymizedRawDataString(originalHoSoData, generalFileInfo, anonymizedPatientInfoForPrompt) { let text = `M√£ CSKCB (File): ${generalFileInfo.maCSKCB || 'N/A'}\n`; text += `Ng√†y l·∫≠p File XML: ${generalFileInfo.ngayLapFile || 'N/A'}\n`; text += `\n--- B·ªánh nh√¢n (STT: ${anonymizedPatientInfoForPrompt.stt || 'N/A'}, M√£ LK tham chi·∫øu: ${originalHoSoData.patientInfo.maLk || 'N/A'}) --- \n`; text += `H·ªç t√™n: ${anonymizedPatientInfoForPrompt.hoTen}\n`; text += `Tu·ªïi: ${anonymizedPatientInfoForPrompt.tuoi || 'N/A'}, Gi·ªõi t√≠nh: ${anonymizedPatientInfoForPrompt.gioiTinh || 'N/A'}, C√¢n n·∫∑ng: ${anonymizedPatientInfoForPrompt.canNang || 'N/A'} kg\n`; text += `Ch·∫©n ƒëo√°n v√†o vi·ªán: ${originalHoSoData.patientInfo.chanDoanVao || 'N/A'}\n`; text += `Ch·∫©n ƒëo√°n RV: ${anonymizedPatientInfoForPrompt.chanDoanRaVien || 'N/A'} (M√£: ${anonymizedPatientInfoForPrompt.maBenh || 'N/A'})\n`; text += `Th·∫ª BHYT: ${anonymizedPatientInfoForPrompt.maTheBHYT} (T·ª´ ${anonymizedPatientInfoForPrompt.gtTheTu} ƒë·∫øn ${anonymizedPatientInfoForPrompt.gtTheDen})\n`; text += `Ng√†y V√†o: ${anonymizedPatientInfoForPrompt.ngayVao || 'N/A'} - Ng√†y Ra: ${anonymizedPatientInfoForPrompt.ngayRa || 'N/A'}\n`; if (originalHoSoData.drugList && originalHoSoData.drugList.length > 0) { text += "\n--- Thu·ªëc ---\n"; originalHoSoData.drugList.forEach((drug) => { text += `- STT ${drug.sttThuoc}: ${drug.tenThuoc}, Li·ªÅu: ${drug.lieuDung}, C√°ch d√πng: ${drug.cachDung}, SL: ${drug.soLuong}, Ng√†y YL: ${drug.ngayYLenh}, M·ª©c h∆∞·ªüng: ${drug.mucHuong || 'N/A'}%\n`; }); } if (originalHoSoData.serviceList && originalHoSoData.serviceList.length > 0) { text += "\n--- DVKT ---\n"; originalHoSoData.serviceList.forEach((service) => { text += `- STT ${service.sttDvkt}: ${service.tenDvkt}, SL: ${service.soLuong}, Ng√†y YL: ${service.ngayYLenh}, M·ª©c h∆∞·ªüng: ${service.mucHuong || 'N/A'}%\n`; }); } if (originalHoSoData.xml4RawContentForPrompt) { text += "\n--- D·ªØ li·ªáu XML4 (K·∫øt qu·∫£ CLS) ---\n"; text += originalHoSoData.xml4RawContentForPrompt + "\n"; } if (originalHoSoData.xml14RawContentForPrompt) { text += "\n--- D·ªØ li·ªáu XML14 (Gi·∫•y h·∫πn) ---\n"; text += originalHoSoData.xml14RawContentForPrompt + "\n"; } return text; }
    function createPdfHtmlContent(analysisTextFromGemini, originalPatientInfo) { return `<html><head><meta charset="UTF-8"><title>Phan Tich AI - ${escapeBasicHtml(originalPatientInfo.maLk) || 'HoSo'}</title><style>body { font-family: 'DejaVu Sans', Arial, sans-serif; line-height: 1.5; margin: 20px; font-size: 11px; } h1 { color: #2c3e50; text-align: center; border-bottom: 1px solid #3498db; padding-bottom: 8px; font-size: 1.5em; margin-bottom: 15px;} h2 { color: #3498db; margin-top: 20px; border-bottom: 1px solid #bdc3c7; padding-bottom: 4px; font-size: 1.2em;} p { margin-bottom: 8px; text-align: justify;} hr { border: 0; height: 1px; background: #ccc; margin: 20px 0; } ul { margin-left: 20px; padding-left: 0;} li { margin-bottom: 5px; } pre { background-color: #f0f0f0; padding: 8px; border: 1px solid #ddd; border-radius: 4px; white-space: pre-wrap; word-wrap: break-word; font-size: 0.85em; } table { width: 100%; border-collapse: collapse; margin-top: 10px; font-size: 0.95em; } th, td { border: 1px solid #ccc; padding: 6px; text-align: left; } th { background-color: #f2f2f2; font-weight: bold; }</style></head><body>${analysisTextFromGemini}</body></html>`; }
    async function getGeminiAnalysis(promptData, patientInfoForPrompt, generalInfo, originalHoSoData, apiKey) { const API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${apiKey}`; const fullPrompt = `B·∫°n l√† m·ªôt b√°c sƒ© ƒëa khoa danh ti·∫øng, d∆∞·ª£c sƒ© nhi·ªÅu nƒÉm kinh nghi·ªám, v√† chuy√™n gia gi√°m ƒë·ªãnh BHYT Vi·ªát Nam. D·ª±a tr√™n d·ªØ li·ªáu XML t√≥m t·∫Øt ƒë∆∞·ª£c cung c·∫•p, h√£y t·∫°o m·ªôt b√°o c√°o HTML chi ti·∫øt theo m·∫´u sau.\n\n**QUY T·∫ÆC PH√ÇN T√çCH:**\n1. **TH·ªúI GIAN:** Ng√†y y l·ªánh ('NGAY_YL') kh√¥ng ƒë∆∞·ª£c sau ng√†y ra vi·ªán ('NGAY_RA'). Th·ªùi gian ƒëi·ªÅu tr·ªã qu√° ng·∫Øn (d∆∞·ªõi 5 ph√∫t) l√† m·ªôt c·∫£nh b√°o.\n2. **THU·ªêC (XML2):** Ki·ªÉm tra li·ªÅu d√πng ('LIEU_DUNG'), c√°ch d√πng ('CACH_DUNG'), thu·ªëc tr√πng l·∫∑p, thu·ªëc kh√¥ng ph√π h·ª£p ch·∫©n ƒëo√°n.\n3. **DVKT & CLS (XML3, XML4):** ƒê√°nh gi√° t·∫ßn su·∫•t, s·ª± c·∫ßn thi·∫øt c·ªßa d·ªãch v·ª• so v·ªõi ch·∫©n ƒëo√°n. Ph√¢n t√≠ch k·∫øt qu·∫£ CLS trong XML4.\n4. **GI·∫§Y H·∫∏N (XML14):** Ph√¢n t√≠ch t√≠nh h·ª£p l·ªá c·ªßa ng√†y h·∫πn.\n5. **T·ªîNG H·ª¢P:** Li·ªát k√™ c√°c ƒëi·ªÉm b·∫•t th∆∞·ªùng, ƒë√°nh d·∫•u <b><font color='red'>[L·ªñI]</font></b> cho c√°c vi ph·∫°m r√µ r√†ng v√† <b><font color='orange'>[C·∫¢NH B√ÅO]</font></b> cho c√°c ƒëi·ªÉm c·∫ßn xem x√©t th√™m.\n\n**Y√äU C·∫¶U ƒê·ªäNH D·∫†NG HTML (TU√ÇN TH·ª¶ NGHI√äM NG·∫∂T):**\n- Ch·ªâ tr·∫£ l·ªùi b·∫±ng n·ªôi dung HTML b√™n trong th·∫ª <body>. Kh√¥ng bao g·ªìm th·∫ª <html>, <head>, ho·∫∑c <style>.\n- B·∫Øt ƒë·∫ßu b·∫±ng <h1>PH√ÇN T√çCH D·ªÆ LI·ªÜU KH√ÅM CH·ªÆA B·ªÜNH DO AI CUNG C·∫§P</h1>.\n- ƒêi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin t√≥m t·∫Øt b·ªánh nh√¢n.\n- T·∫°o c√°c m·ª•c <h2> cho t·ª´ng ph·∫ßn ph√¢n t√≠ch.\n- D√πng b·∫£ng (<table>) v·ªõi c√°c c·ªôt ƒë√£ ch·ªâ ƒë·ªãnh ƒë·ªÉ tr√¨nh b√†y chi ti·∫øt thu·ªëc v√† DVKT.\n- ƒêi·ªÅn th√¥ng tin v√†o c√°c m·ª•c "T·ªïng h·ª£p l·ªói" v√† "Khuy·∫øn ngh·ªã".\n- K·∫øt th√∫c b·∫±ng ph·∫ßn "T·ª´ ch·ªëi tr√°ch nhi·ªám".\n\n--- START TEMPLATE ---\n<h1>PH√ÇN T√çCH D·ªÆ LI·ªÜU KH√ÅM CH·ªÆA B·ªÜNH DO AI CUNG C·∫§P</h1>\n<p><b>M√£ CSKCB:</b> ${escapeBasicHtml(generalInfo.maCSKCB) || 'N/A'}</p>\n<p><b>Ng√†y l·∫≠p h·ªì s∆°:</b> ${escapeBasicHtml(generalInfo.ngayLapFile) || 'N/A'}</p>\n<p><b>B·ªánh nh√¢n (STT: ${escapeBasicHtml(patientInfoForPrompt.stt)}):</b> ${escapeBasicHtml(patientInfoForPrompt.hoTen)} - ${escapeBasicHtml(patientInfoForPrompt.tuoi?.toString()) || 'N/A'} tu·ªïi - Gi·ªõi t√≠nh: ${escapeBasicHtml(patientInfoForPrompt.gioiTinh) || 'N/A'} - C√¢n n·∫∑ng: ${escapeBasicHtml(patientInfoForPrompt.canNang) || 'N/A'} kg</p>\n<p><b>Th√¥ng tin th·∫ª BHYT:</b> ${escapeBasicHtml(patientInfoForPrompt.maTheBHYT)} (T·ª´: ${escapeBasicHtml(patientInfoForPrompt.gtTheTu)} ƒë·∫øn: ${escapeBasicHtml(patientInfoForPrompt.gtTheDen)})</p>\n<p><b>M√£ LK (tham chi·∫øu n·ªôi b·ªô):</b> ${escapeBasicHtml(patientInfoForPrompt.maLK) || 'N/A'}</p>\n<p><b>Ch·∫©n ƒëo√°n v√†o vi·ªán:</b> ${escapeBasicHtml(patientInfoForPrompt.chanDoanVao) || 'N/A'}</p>\n<p><b>Ch·∫©n ƒëo√°n ra vi·ªán:</b> ${escapeBasicHtml(patientInfoForPrompt.chanDoanRaVien) || 'N/A'}</p>\n<p><b>M√£ ICD CH√çNH:</b> ${escapeBasicHtml(patientInfoForPrompt.maBenh) || 'N/A'}</p>\n<p><b>Th·ªùi gian ƒëi·ªÅu tr·ªã:</b> T·ª´ ${escapeBasicHtml(patientInfoForPrompt.ngayVao)} ƒë·∫øn ${escapeBasicHtml(patientInfoForPrompt.ngayRa) || 'N/A'}</p>\n<hr>\n\n<h2>1. Th√¥ng tin h√†nh ch√≠nh v√† quy·ªÅn l·ª£i BHYT:</h2>\n<p><i>ƒê√°nh gi√° quy·ªÅn l·ª£i BHYT:</i> [Ph√¢n t√≠ch MUC_HUONG, TYLE_TT. L∆∞u √Ω: Th√¥ng tin chi ti·∫øt th·∫ª BHYT ƒë√£ ƒë∆∞·ª£c ·∫©n danh.]</p>\n\n<h2>2. Ki·ªÉm tra m√£ ICD v√† ch·∫©n ƒëo√°n:</h2>\n<p><i>ƒê√°nh gi√° m√£ ICD:</i> [Ph√¢n t√≠ch m√£ ICD c√≥ ph√π h·ª£p v·ªõi ch·∫©n ƒëo√°n ra vi·ªán kh√¥ng]</p>\n<p><i>T√≠nh nh·∫•t qu√°n:</i> [So s√°nh ch·∫©n ƒëo√°n c√°c giai ƒëo·∫°n c·ªßa qu√° tr√¨nh ƒëi·ªÅu tr·ªã]</p>\n\n<h2>3. Ki·ªÉm tra th·ªùi gian ƒëi·ªÅu tr·ªã:</h2>\n<p><i>T·ªïng th·ªùi gian ƒëi·ªÅu tr·ªã:</i> [T√≠nh to√°n s·ªë ng√†y/ph√∫t ƒëi·ªÅu tr·ªã, ƒë√°nh gi√° t√≠nh h·ª£p l√Ω]</p>\n<p><i>Ki·ªÉm tra m·ªëc th·ªùi gian:</i> [Ph√¢n t√≠ch c√≥ m√¢u thu·∫´n v·ªÅ th·ªùi gian kh√¥ng, v√≠ d·ª• NGAY_YL so v·ªõi NGAY_VAO, NGAY_RA]</p>\n<p style="color: red;"><i>C√°c y l·ªánh sau ng√†y ra vi·ªán:</i> [Li·ªát k√™ chi ti·∫øt c√°c tr∆∞·ªùng h·ª£p y l·ªánh sau ng√†y ra vi·ªán]</p>\n\n<h2>4. Ph√¢n t√≠ch thu·ªëc ƒëi·ªÅu tr·ªã (XML2):</h2>\n<table border="1" style="width:100%; border-collapse: collapse;">\n    <tr style="background-color: #f2f2f2;">\n        <th>T√™n thu·ªëc</th><th>Li·ªÅu d√πng</th><th>C√°ch d√πng</th><th>S·ªë l∆∞·ª£ng</th><th>M·ª©c h∆∞·ªüng</th><th>Ng√†y y l·ªánh</th><th>Ghi ch√∫ ph√¢n t√≠ch</th>\n    </tr>\n    <!-- AI s·∫Ω ƒëi·ªÅn c√°c d√≤ng <tr> v√†o ƒë√¢y -->\n</table>\n\n<h2>5. Ph√¢n t√≠ch d·ªãch v·ª• k·ªπ thu·∫≠t (XML3):</h2>\n<table border="1" style="width:100%; border-collapse: collapse;">\n    <tr style="background-color: #f2f2f2;">\n        <th>T√™n d·ªãch v·ª•</th><th>S·ªë l∆∞·ª£ng</th><th>Ng√†y y l·ªánh</th><th>M·ª©c h∆∞·ªüng</th><th>Ghi ch√∫ ph√¢n t√≠ch</th>\n    </tr>\n    <!-- AI s·∫Ω ƒëi·ªÅn c√°c d√≤ng <tr> v√†o ƒë√¢y -->\n</table>\n\n<h2>6. Ph√¢n t√≠ch k·∫øt qu·∫£ c·∫≠n l√¢m s√†ng (XML4):</h2>\n<p><i>ƒê√°nh gi√° chung:</i> [Ph√¢n t√≠ch c√°c ch·ªâ s·ªë trong XML4, s·ª± ph√π h·ª£p v·ªõi ch·∫©n ƒëo√°n v√† thu·ªëc ƒëi·ªÅu tr·ªã]</p>\n<pre>${originalHoSoData.xml4RawContentForPrompt ? escapeBasicHtml(originalHoSoData.xml4RawContentForPrompt) : "Kh√¥ng c√≥ d·ªØ li·ªáu XML4."}</pre>\n\n<h2>7. Ki·ªÉm tra gi·∫•y h·∫πn kh√°m l·∫°i (XML14):</h2>\n<p><i>Th√¥ng tin h·∫πn kh√°m:</i> [Ph√¢n t√≠ch th√¥ng tin h·∫πn kh√°m v√† t√≠nh h·ª£p l√Ω n·∫øu c√≥ trong XML14]</p>\n<pre>${originalHoSoData.xml14RawContentForPrompt ? escapeBasicHtml(originalHoSoData.xml14RawContentForPrompt) : "Kh√¥ng c√≥ d·ªØ li·ªáu XML14."}</pre>\n\n<h2>8. T·ªïng h·ª£p l·ªói ph√°t hi·ªán:</h2>\n<div style="background-color: #ffebee; padding: 15px; border-radius: 5px;">\n    <h3 style="color: #c62828;">C√°c l·ªói nghi√™m tr·ªçng (c·∫ßn xem x√©t t·ª´ ch·ªëi thanh to√°n):</h3>\n    <ul><!-- AI ƒëi·ªÅn <li> v√†o ƒë√¢y --></ul>\n    <h3 style="color: #ff8f00;">C√°c c·∫£nh b√°o c·∫ßn l∆∞u √Ω (c√≥ th·ªÉ c·∫ßn gi·∫£i tr√¨nh):</h3>\n    <ul><!-- AI ƒëi·ªÅn <li> v√†o ƒë√¢y --></ul>\n</div>\n\n<h2>9. Khuy·∫øn ngh·ªã:</h2>\n<div style="background-color: #e8f5e9; padding: 15px; border-radius: 5px;">\n    <ul><!-- AI ƒëi·ªÅn <li> v√†o ƒë√¢y --></ul>\n</div>\n\n<h2>10. T·ª´ ch·ªëi tr√°ch nhi·ªám:</h2>\n<div style="background-color: #fff3cd; padding: 15px; border: 2px solid #ffeeba; border-radius: 5px; margin: 15px 0;">\n  <p style="font-weight: bold; color: #856404; font-size: 16px; text-align: center; text-transform: uppercase; margin-bottom: 10px;">‚ö†Ô∏è L∆ØU √ù QUAN TR·ªåNG ‚ö†Ô∏è</p>\n  <p style="text-align: center; font-weight: bold;">B√°o c√°o n√†y ƒë∆∞·ª£c t·∫°o b·ªüi AI theo y√™u c·∫ßu c·ªßa Anh Khoa - IT Trung t√¢m Y t·∫ø Huy·ªán C·ªß Chi.</p>\n  <p style="text-align: center; font-weight: bold;">ƒê√¢y CH·ªà L√Ä C√îNG C·ª§ H·ªñ TR·ª¢, m·ªçi quy·∫øt ƒë·ªãnh cu·ªëi c√πng PH·∫¢I do chuy√™n gia y t·∫ø v√† y b√°c sƒ© ƒë∆∞a ra.</p>\n</div>\n--- END TEMPLATE ---`; try { const response = await fetch(API_URL, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ contents: [{ parts: [{ text: fullPrompt }] }], generationConfig: { temperature: 0.2, maxOutputTokens: 8192 } }) }); if (!response.ok) { const errorData = await response.json(); throw new Error(`L·ªói API: ${errorData.error?.message || response.statusText}`); } const data = await response.json(); let analysisHtmlContent = data.candidates?.[0]?.content?.parts?.[0]?.text || "<p>Kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ AI.</p>"; if (analysisHtmlContent.startsWith("```html")) { analysisHtmlContent = analysisHtmlContent.substring(7).trim(); } if (analysisHtmlContent.endsWith("```")) { analysisHtmlContent = analysisHtmlContent.substring(0, analysisHtmlContent.length - 3).trim(); } return { success: true, content: analysisHtmlContent }; } catch (error) { console.error("L·ªói g·ªçi Gemini API:", error); return { success: false, content: error.message }; }
    }
});
